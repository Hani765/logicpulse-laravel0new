{"version":3,"file":"usefetch-CtnNn8YM.js","sources":["../../../resources/js/hooks/usefetch.tsx"],"sourcesContent":["import { echoInstance } from \"@/bootstrap\";\nimport React from \"react\";\nimport { usePage } from \"@inertiajs/react\";\nimport { PageProps } from \"@/types\";\nimport { playNotificationSound } from \"./play-audio\";\nimport { toast } from \"sonner\";\n\ntype FetchResult<T> = {\n    data: T | null;\n    error: Error | null;\n    isLoading: boolean;\n};\n\nexport default function useFetch<T>(url: string): FetchResult<T> {\n    const [data, setData] = React.useState<T | null>(null);\n    const [error, setError] = React.useState<Error | null>(null);\n    const [isLoading, setIsLoading] = React.useState(true);\n    const page = usePage<PageProps>();\n    const userId = page.props.auth.user.unique_id;\n    const userRole = page.props.auth.user.role;\n\n    const fetchData = async (url: string) => {\n        try {\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            const json = await response.json();\n            setData(json);\n        } catch (error) {\n            setError(error as Error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    React.useEffect(() => {\n        const channels: any[] = [];\n        // Subscribe to user-specific channel\n        channels.push(echoInstance.private(`clickConversion.${userId}`));\n\n        // Subscribe to role-specific channel\n        channels.push(echoInstance.private(`clickConversion.role.${userRole}`));\n\n        // Listen for the notification event on all channels\n        channels.forEach((channel) => {\n            channel.listen(\".clickConversion.sent\", (e: any) => {\n                if (e.clickConversion.message === \"conversion\") {\n                    playNotificationSound();\n                    toast.message(\"New message\", {\n                        description: \"A new conversion has beed recieved\",\n                    });\n                }\n                fetchData(url); // Fetch data when notification is received\n            });\n        });\n\n        // Cleanup the event listeners when the component unmounts\n        return () => {\n            channels.forEach((channel) => {\n                channel.stopListening(\".clickConversion.sent\");\n            });\n        };\n    }, [userId, userRole, url]); // Re-run if userId, userRole, or url changes\n\n    React.useEffect(() => {\n        setIsLoading(true);\n        fetchData(url);\n    }, [url]);\n\n    return { data, error, isLoading };\n}\n"],"names":["useFetch","url","data","setData","React","error","setError","isLoading","setIsLoading","page","usePage","userId","userRole","fetchData","response","json","channels","echoInstance","channel","e","playNotificationSound","toast"],"mappings":"yGAaA,SAAwBA,EAAYC,EAA6B,CAC7D,KAAM,CAACC,EAAMC,CAAO,EAAIC,EAAM,SAAmB,IAAI,EAC/C,CAACC,EAAOC,CAAQ,EAAIF,EAAM,SAAuB,IAAI,EACrD,CAACG,EAAWC,CAAY,EAAIJ,EAAM,SAAS,EAAI,EAC/CK,EAAOC,EAAmB,EAC1BC,EAASF,EAAK,MAAM,KAAK,KAAK,UAC9BG,EAAWH,EAAK,MAAM,KAAK,KAAK,KAEhCI,EAAY,MAAOZ,GAAgB,CACjC,GAAA,CACM,MAAAa,EAAW,MAAM,MAAMb,CAAG,EAC5B,GAAA,CAACa,EAAS,GACV,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAEtD,MAAAC,EAAO,MAAMD,EAAS,KAAK,EACjCX,EAAQY,CAAI,QACPV,EAAO,CACZC,EAASD,CAAc,CAAA,QACzB,CACEG,EAAa,EAAK,CAAA,CAE1B,EAEA,OAAAJ,EAAM,UAAU,IAAM,CAClB,MAAMY,EAAkB,CAAC,EAEzB,OAAAA,EAAS,KAAKC,EAAa,QAAQ,mBAAmBN,CAAM,EAAE,CAAC,EAG/DK,EAAS,KAAKC,EAAa,QAAQ,wBAAwBL,CAAQ,EAAE,CAAC,EAG7DI,EAAA,QAASE,GAAY,CAClBA,EAAA,OAAO,wBAA0BC,GAAW,CAC5CA,EAAE,gBAAgB,UAAY,eACRC,EAAA,EACtBC,EAAM,QAAQ,cAAe,CACzB,YAAa,oCAAA,CAChB,GAELR,EAAUZ,CAAG,CAAA,CAChB,CAAA,CACJ,EAGM,IAAM,CACAe,EAAA,QAASE,GAAY,CAC1BA,EAAQ,cAAc,uBAAuB,CAAA,CAChD,CACL,CACD,EAAA,CAACP,EAAQC,EAAUX,CAAG,CAAC,EAE1BG,EAAM,UAAU,IAAM,CAClBI,EAAa,EAAI,EACjBK,EAAUZ,CAAG,CAAA,EACd,CAACA,CAAG,CAAC,EAED,CAAE,KAAAC,EAAM,MAAAG,EAAO,UAAAE,CAAU,CACpC"}