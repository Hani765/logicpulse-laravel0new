{"version":3,"file":"Step4-CXp5DWDy.js","sources":["../../../resources/js/Pages/Offers/components/create/steps/Step4.tsx"],"sourcesContent":["// Step2.tsx\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { MultiSelect } from \"@/components/ui/multi-select\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { Head } from \"@inertiajs/react\";\r\nimport { ReloadIcon } from \"@radix-ui/react-icons\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"sonner\";\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport InputError from \"@/components/InputError\";\r\nimport { Label } from \"@/components/ui/label\";\r\n\r\ninterface StepProps {\r\n    formData: any;\r\n    errors: any;\r\n    setUserDataFetched: any;\r\n    userDataFetched: any;\r\n    setFormData: (data: any) => void;\r\n    currentStep: number;\r\n    setCurrentStep: any;\r\n    setFetchedUsersData: any;\r\n    fetchedUsersData: any;\r\n    role: string;\r\n}\r\n\r\nconst userRoles = [\r\n    { label: \"All\", value: \"all\" },\r\n    { label: \"All Admins\", value: \"admins\" },\r\n    { label: \"All Managers\", value: \"managers\" },\r\n    { label: \"All Users\", value: \"users\" },\r\n];\r\nconst visibleOption = [\r\n    { label: \"Everyone\", value: \"everyone\" },\r\n    { label: \"Only Admins\", value: \"admins\" },\r\n    { label: \"Only Managers\", value: \"managers\" },\r\n    { label: \"Only Users\", value: \"users\" },\r\n];\r\n\r\nconst getRoleOptions = (role: string) => {\r\n    switch (role) {\r\n        case \"administrator\":\r\n            return userRoles;\r\n        case \"admin\":\r\n            return userRoles.filter((role) => role.value !== \"admins\");\r\n        default:\r\n            return [];\r\n    }\r\n};\r\nconst getVisibleOptions = (role: string) => {\r\n    switch (role) {\r\n        case \"administrator\":\r\n            return visibleOption;\r\n        case \"admin\":\r\n            return visibleOption.filter((role) => role.value !== \"admins\");\r\n        default:\r\n            return [];\r\n    }\r\n};\r\n\r\nconst Step2: React.FC<StepProps> = ({\r\n    formData: data,\r\n    setFormData: setData,\r\n    errors,\r\n    userDataFetched,\r\n    currentStep,\r\n    setCurrentStep,\r\n    setUserDataFetched,\r\n    setFetchedUsersData,\r\n    fetchedUsersData,\r\n    role,\r\n}) => {\r\n    const [fetching, setFetching] = useState(false);\r\n    const [usersFetching, setUsersFetching] = useState(false);\r\n    const [usersType, setUsersType] = useState(\"all\");\r\n\r\n    const fetchData = async () => {\r\n        setFetching(true);\r\n        try {\r\n            const [usersResponse, countriesResponse] = await Promise.all([\r\n                fetch(\"/fetch/all-users\"),\r\n                fetch(\"/fetch/countriesData\"),\r\n            ]);\r\n\r\n            if (!usersResponse.ok || !countriesResponse.ok) {\r\n                throw new Error(\"Failed to fetch data.\");\r\n            }\r\n\r\n            const [users, countries] = await Promise.all([\r\n                usersResponse.json(),\r\n                countriesResponse.json(),\r\n            ]);\r\n\r\n            setFetchedUsersData({ users, countries });\r\n            setUserDataFetched(true);\r\n        } catch (error) {\r\n            toast.error(\"Failed to fetch data. Please try again later.\");\r\n        } finally {\r\n            setFetching(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!userDataFetched) {\r\n            fetchData();\r\n        }\r\n    }, [userDataFetched]);\r\n\r\n    const onRoleChange = async (value: string) => {\r\n        setUsersFetching(true);\r\n        setUsersType(value);\r\n        try {\r\n            const response = await fetch(`/fetch/all-users?filter=${value}`);\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n            const usersData = await response.json();\r\n            setFetchedUsersData({ ...fetchedUsersData, users: usersData });\r\n            const uniqueIds = usersData\r\n                .map((user: any) => user.unique_id)\r\n                .join(\", \");\r\n            if (uniqueIds !== null) {\r\n                setData({ ...data, users_ids: uniqueIds });\r\n            } else {\r\n                setData({ ...data, users_ids: \"\" });\r\n            }\r\n        } catch (error) {\r\n            toast.error(\"Failed to fetch data. Please try again later.\");\r\n        } finally {\r\n            setUsersFetching(false);\r\n        }\r\n    };\r\n    const roles = getRoleOptions(role);\r\n    return (\r\n        <div>\r\n            <Head title=\"Target Details\" />\r\n            {fetching ? (\r\n                <div className=\"space-y-4 mt-4\">\r\n                    <Skeleton className=\"h-10\" />\r\n                    <Skeleton className=\"h-10\" />\r\n                    <Skeleton className=\"h-10\" />\r\n                    <Skeleton className=\"h-10\" />\r\n                </div>\r\n            ) : (\r\n                <div className=\"space-y-2 bg-white p-4 rounded dark:bg-slate-900\">\r\n                    <div className=\"space-y-2\">\r\n                        <div className=\"md:grid grdid-cols-1 md:grid-cols-3 gap-2\">\r\n                            <div className=\"\">\r\n                                <Label>Select Status</Label>\r\n                                <Select\r\n                                    value={data.status}\r\n                                    onValueChange={(status) =>\r\n                                        setData({ ...data, status })\r\n                                    }\r\n                                >\r\n                                    <SelectTrigger className=\"h-10 my-1\">\r\n                                        <SelectValue placeholder=\"Select status\" />\r\n                                    </SelectTrigger>\r\n                                    <SelectContent side=\"top\">\r\n                                        {[\"active\", \"inactive\", \"paused\"].map(\r\n                                            (status) => (\r\n                                                <SelectItem\r\n                                                    key={status}\r\n                                                    value={status}\r\n                                                >\r\n                                                    {status}\r\n                                                </SelectItem>\r\n                                            ),\r\n                                        )}\r\n                                    </SelectContent>\r\n                                </Select>\r\n                                <InputError message={errors.status} />\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <Label>Who can apply</Label>\r\n                                <Select\r\n                                    value={data.appliableFor}\r\n                                    onValueChange={(appliableFor) =>\r\n                                        setData({ ...data, appliableFor })\r\n                                    }\r\n                                >\r\n                                    <SelectTrigger className=\"h-10 my-1\">\r\n                                        <SelectValue placeholder=\"Select visiblity\" />\r\n                                    </SelectTrigger>\r\n                                    <SelectContent side=\"top\">\r\n                                        {getVisibleOptions(role).map(\r\n                                            (visible) => (\r\n                                                <SelectItem\r\n                                                    key={visible.value}\r\n                                                    value={visible.value}\r\n                                                >\r\n                                                    {visible.label}\r\n                                                </SelectItem>\r\n                                            ),\r\n                                        )}\r\n                                    </SelectContent>\r\n                                </Select>\r\n                                <InputError message={errors.appliableFor} />\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <Label>Select Users</Label>\r\n                                <Select\r\n                                    value={usersType}\r\n                                    onValueChange={onRoleChange}\r\n                                >\r\n                                    <SelectTrigger className=\"h-10 my-1\">\r\n                                        <SelectValue placeholder=\"Select users\" />\r\n                                    </SelectTrigger>\r\n                                    <SelectContent side=\"top\">\r\n                                        {roles.map((role) => (\r\n                                            <SelectItem\r\n                                                key={role.value}\r\n                                                value={role.value}\r\n                                            >\r\n                                                {role.label}\r\n                                            </SelectItem>\r\n                                        ))}\r\n                                    </SelectContent>\r\n                                </Select>\r\n                            </div>\r\n                        </div>\r\n                        {usersFetching ? (\r\n                            <Skeleton className=\"h-10\" />\r\n                        ) : (\r\n                            <MultiSelect\r\n                                items={fetchedUsersData.users}\r\n                                selectedItems={data.users_ids}\r\n                                onSelect={(ids) =>\r\n                                    setData({ ...data, users_ids: ids })\r\n                                }\r\n                                label=\"Selected Users\"\r\n                            />\r\n                        )}\r\n\r\n                        <MultiSelect\r\n                            items={fetchedUsersData.countries}\r\n                            selectedItems={data.countries}\r\n                            onSelect={(ids) =>\r\n                                setData({ ...data, countries: ids })\r\n                            }\r\n                            label=\"Select Countries\"\r\n                        />\r\n\r\n                        <div className=\"flex justify-end mt-4 gap-2\">\r\n                            <Button\r\n                                variant=\"outline\"\r\n                                size=\"icon\"\r\n                                onClick={fetchData}\r\n                            >\r\n                                <ReloadIcon />\r\n                            </Button>\r\n                            {currentStep > 1 && (\r\n                                <Button\r\n                                    onClick={() =>\r\n                                        setCurrentStep(currentStep - 1)\r\n                                    }\r\n                                >\r\n                                    Back\r\n                                </Button>\r\n                            )}\r\n                            <Button\r\n                                onClick={() => setCurrentStep(currentStep + 1)}\r\n                            >\r\n                                Next\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Step2;\r\n"],"names":["userRoles","visibleOption","getRoleOptions","role","getVisibleOptions","Step2","data","setData","errors","userDataFetched","currentStep","setCurrentStep","setUserDataFetched","setFetchedUsersData","fetchedUsersData","fetching","setFetching","useState","usersFetching","setUsersFetching","usersType","setUsersType","fetchData","usersResponse","countriesResponse","users","countries","toast","useEffect","onRoleChange","value","response","usersData","uniqueIds","user","roles","jsx","Head","jsxs","Skeleton","Label","Select","status","SelectTrigger","SelectValue","SelectContent","SelectItem","InputError","appliableFor","visible","MultiSelect","ids","Button","ReloadIcon"],"mappings":"qrBA+BA,MAAMA,EAAY,CACd,CAAE,MAAO,MAAO,MAAO,KAAM,EAC7B,CAAE,MAAO,aAAc,MAAO,QAAS,EACvC,CAAE,MAAO,eAAgB,MAAO,UAAW,EAC3C,CAAE,MAAO,YAAa,MAAO,OAAQ,CACzC,EACMC,EAAgB,CAClB,CAAE,MAAO,WAAY,MAAO,UAAW,EACvC,CAAE,MAAO,cAAe,MAAO,QAAS,EACxC,CAAE,MAAO,gBAAiB,MAAO,UAAW,EAC5C,CAAE,MAAO,aAAc,MAAO,OAAQ,CAC1C,EAEMC,EAAkBC,GAAiB,CACrC,OAAQA,EAAM,CACV,IAAK,gBACM,OAAAH,EACX,IAAK,QACD,OAAOA,EAAU,OAAQG,GAASA,EAAK,QAAU,QAAQ,EAC7D,QACI,MAAO,CAAC,CAAA,CAEpB,EACMC,EAAqBD,GAAiB,CACxC,OAAQA,EAAM,CACV,IAAK,gBACM,OAAAF,EACX,IAAK,QACD,OAAOA,EAAc,OAAQE,GAASA,EAAK,QAAU,QAAQ,EACjE,QACI,MAAO,CAAC,CAAA,CAEpB,EAEME,GAA6B,CAAC,CAChC,SAAUC,EACV,YAAaC,EACb,OAAAC,EACA,gBAAAC,EACA,YAAAC,EACA,eAAAC,EACA,mBAAAC,EACA,oBAAAC,EACA,iBAAAC,EACA,KAAAX,CACJ,IAAM,CACF,KAAM,CAACY,EAAUC,CAAW,EAAIC,EAAAA,SAAS,EAAK,EACxC,CAACC,EAAeC,CAAgB,EAAIF,EAAAA,SAAS,EAAK,EAClD,CAACG,EAAWC,CAAY,EAAIJ,EAAAA,SAAS,KAAK,EAE1CK,EAAY,SAAY,CAC1BN,EAAY,EAAI,EACZ,GAAA,CACA,KAAM,CAACO,EAAeC,CAAiB,EAAI,MAAM,QAAQ,IAAI,CACzD,MAAM,kBAAkB,EACxB,MAAM,sBAAsB,CAAA,CAC/B,EAED,GAAI,CAACD,EAAc,IAAM,CAACC,EAAkB,GAClC,MAAA,IAAI,MAAM,uBAAuB,EAG3C,KAAM,CAACC,EAAOC,CAAS,EAAI,MAAM,QAAQ,IAAI,CACzCH,EAAc,KAAK,EACnBC,EAAkB,KAAK,CAAA,CAC1B,EAEmBX,EAAA,CAAE,MAAAY,EAAO,UAAAC,EAAW,EACxCd,EAAmB,EAAI,OACX,CACZe,EAAM,MAAM,+CAA+C,CAAA,QAC7D,CACEX,EAAY,EAAK,CAAA,CAEzB,EAEAY,EAAAA,UAAU,IAAM,CACPnB,GACSa,EAAA,CACd,EACD,CAACb,CAAe,CAAC,EAEd,MAAAoB,EAAe,MAAOC,GAAkB,CAC1CX,EAAiB,EAAI,EACrBE,EAAaS,CAAK,EACd,GAAA,CACA,MAAMC,EAAW,MAAM,MAAM,2BAA2BD,CAAK,EAAE,EAC3D,GAAA,CAACC,EAAS,GACV,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAEtD,MAAAC,EAAY,MAAMD,EAAS,KAAK,EACtClB,EAAoB,CAAE,GAAGC,EAAkB,MAAOkB,EAAW,EACvD,MAAAC,EAAYD,EACb,IAAKE,GAAcA,EAAK,SAAS,EACjC,KAAK,IAAI,EAEV3B,EADA0B,IAAc,KACN,CAAE,GAAG3B,EAAM,UAAW2B,GAEtB,CAAE,GAAG3B,EAAM,UAAW,GAFW,OAIjC,CACZqB,EAAM,MAAM,+CAA+C,CAAA,QAC7D,CACER,EAAiB,EAAK,CAAA,CAE9B,EACMgB,EAAQjC,EAAeC,CAAI,EACjC,cACK,MACG,CAAA,SAAA,CAACiC,EAAAA,IAAAC,EAAA,CAAK,MAAM,gBAAiB,CAAA,EAC5BtB,EACGuB,EAAA,KAAC,MAAI,CAAA,UAAU,iBACX,SAAA,CAACF,EAAAA,IAAAG,EAAA,CAAS,UAAU,MAAO,CAAA,EAC3BH,EAAAA,IAACG,EAAS,CAAA,UAAU,MAAO,CAAA,EAC3BH,EAAAA,IAACG,EAAS,CAAA,UAAU,MAAO,CAAA,EAC3BH,EAAAA,IAACG,EAAS,CAAA,UAAU,MAAO,CAAA,CAC/B,CAAA,CAAA,QAEC,MAAI,CAAA,UAAU,mDACX,SAACD,EAAAA,KAAA,MAAA,CAAI,UAAU,YACX,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,4CACX,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,GACX,SAAA,CAAAF,EAAAA,IAACI,GAAM,SAAa,eAAA,CAAA,EACpBF,EAAA,KAACG,EAAA,CACG,MAAOnC,EAAK,OACZ,cAAgBoC,GACZnC,EAAQ,CAAE,GAAGD,EAAM,OAAAoC,EAAQ,EAG/B,SAAA,CAAAN,EAAAA,IAACO,GAAc,UAAU,YACrB,eAACC,EAAY,CAAA,YAAY,gBAAgB,CAC7C,CAAA,EACAR,MAACS,GAAc,KAAK,MACf,UAAC,SAAU,WAAY,QAAQ,EAAE,IAC7BH,GACGN,EAAA,IAACU,EAAA,CAEG,MAAOJ,EAEN,SAAAA,CAAA,EAHIA,CAAA,CAIT,CAGZ,CAAA,CAAA,CAAA,CACJ,EACCN,EAAAA,IAAAW,EAAA,CAAW,QAASvC,EAAO,MAAQ,CAAA,CAAA,EACxC,EACA8B,EAAAA,KAAC,MAAI,CAAA,UAAU,GACX,SAAA,CAAAF,EAAAA,IAACI,GAAM,SAAa,eAAA,CAAA,EACpBF,EAAA,KAACG,EAAA,CACG,MAAOnC,EAAK,aACZ,cAAgB0C,GACZzC,EAAQ,CAAE,GAAGD,EAAM,aAAA0C,EAAc,EAGrC,SAAA,CAAAZ,EAAAA,IAACO,GAAc,UAAU,YACrB,eAACC,EAAY,CAAA,YAAY,mBAAmB,CAChD,CAAA,QACCC,EAAc,CAAA,KAAK,MACf,SAAAzC,EAAkBD,CAAI,EAAE,IACpB8C,GACGb,EAAA,IAACU,EAAA,CAEG,MAAOG,EAAQ,MAEd,SAAQA,EAAA,KAAA,EAHJA,EAAQ,KAAA,CAIjB,CAGZ,CAAA,CAAA,CAAA,CACJ,EACCb,EAAAA,IAAAW,EAAA,CAAW,QAASvC,EAAO,YAAc,CAAA,CAAA,EAC9C,EACA8B,EAAAA,KAAC,MAAI,CAAA,UAAU,GACX,SAAA,CAAAF,EAAAA,IAACI,GAAM,SAAY,cAAA,CAAA,EACnBF,EAAA,KAACG,EAAA,CACG,MAAOrB,EACP,cAAeS,EAEf,SAAA,CAAAO,EAAAA,IAACO,GAAc,UAAU,YACrB,eAACC,EAAY,CAAA,YAAY,eAAe,CAC5C,CAAA,QACCC,EAAc,CAAA,KAAK,MACf,SAAMV,EAAA,IAAKhC,GACRiC,EAAA,IAACU,EAAA,CAEG,MAAO3C,EAAK,MAEX,SAAAA,EAAK,KAAA,EAHDA,EAAK,KAAA,CAKjB,CACL,CAAA,CAAA,CAAA,CAAA,CACJ,CACJ,CAAA,CAAA,EACJ,EACCe,EACGkB,EAAA,IAACG,EAAS,CAAA,UAAU,MAAO,CAAA,EAE3BH,EAAA,IAACc,EAAA,CACG,MAAOpC,EAAiB,MACxB,cAAeR,EAAK,UACpB,SAAW6C,GACP5C,EAAQ,CAAE,GAAGD,EAAM,UAAW6C,EAAK,EAEvC,MAAM,gBAAA,CACV,EAGJf,EAAA,IAACc,EAAA,CACG,MAAOpC,EAAiB,UACxB,cAAeR,EAAK,UACpB,SAAW6C,GACP5C,EAAQ,CAAE,GAAGD,EAAM,UAAW6C,EAAK,EAEvC,MAAM,kBAAA,CACV,EAEAb,EAAAA,KAAC,MAAI,CAAA,UAAU,8BACX,SAAA,CAAAF,EAAA,IAACgB,EAAA,CACG,QAAQ,UACR,KAAK,OACL,QAAS9B,EAET,eAAC+B,EAAW,CAAA,CAAA,CAAA,CAChB,EACC3C,EAAc,GACX0B,EAAA,IAACgB,EAAA,CACG,QAAS,IACLzC,EAAeD,EAAc,CAAC,EAErC,SAAA,MAAA,CAED,EAEJ0B,EAAA,IAACgB,EAAA,CACG,QAAS,IAAMzC,EAAeD,EAAc,CAAC,EAChD,SAAA,MAAA,CAAA,CAED,CACJ,CAAA,CAAA,CAAA,CACJ,CACJ,CAAA,CAAA,EAER,CAER"}