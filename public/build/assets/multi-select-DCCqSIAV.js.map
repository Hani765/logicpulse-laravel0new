{"version":3,"file":"multi-select-DCCqSIAV.js","sources":["../../../resources/js/components/ui/badge.tsx","../../../resources/js/components/ui/multi-select.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { X } from \"lucide-react\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport {\r\n    Command,\r\n    CommandGroup,\r\n    CommandItem,\r\n    CommandList,\r\n} from \"@/components/ui/command\";\r\nimport { Command as CommandPrimitive } from \"cmdk\";\r\nimport { Checkbox } from \"./checkbox\";\r\nimport { Input } from \"./input\";\r\n\r\ntype Item = {\r\n    unique_id: string;\r\n    name: string;\r\n};\r\n\r\ninterface MultiSelectProps {\r\n    items: Item[];\r\n    selectedItems: string; // Comma-separated values\r\n    label: string; // Comma-separated values\r\n    descriptoin?: string; // Comma-separated values\r\n    onSelect: (unique_id: string) => void; // Handler to update selected items\r\n}\r\n\r\nexport function MultiSelect({\r\n    items,\r\n    selectedItems,\r\n    onSelect,\r\n    descriptoin,\r\n    label,\r\n}: MultiSelectProps) {\r\n    const inputRef = React.useRef<HTMLInputElement>(null);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [inputValue, setInputValue] = React.useState(\"\");\r\n    const [selectAll, setSelectAll] = React.useState(false);\r\n\r\n    const handleUnselect = React.useCallback(\r\n        (item: Item) => {\r\n            const updatedSelection = selectedItems\r\n                .split(\",\")\r\n                .filter((unique_id) => unique_id !== item.unique_id)\r\n                .join(\",\");\r\n            onSelect(updatedSelection);\r\n        },\r\n        [selectedItems, onSelect]\r\n    );\r\n\r\n    const handleSelectAll = React.useCallback(() => {\r\n        if (selectAll) {\r\n            onSelect(\"\");\r\n        } else {\r\n            const allValues = items.map((item) => item.unique_id).join(\",\");\r\n            onSelect(allValues);\r\n        }\r\n        setSelectAll(!selectAll);\r\n    }, [selectAll, items, onSelect]);\r\n\r\n    const handleKeyDown = React.useCallback(\r\n        (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n            const input = inputRef.current;\r\n            if (input) {\r\n                if (e.key === \"Delete\" || e.key === \"Backspace\") {\r\n                    if (input.value === \"\") {\r\n                        const updatedSelection = selectedItems\r\n                            .split(\",\")\r\n                            .slice(0, -1)\r\n                            .join(\",\");\r\n                        onSelect(updatedSelection);\r\n                    }\r\n                }\r\n                if (e.key === \"Escape\") {\r\n                    input.blur();\r\n                }\r\n            }\r\n        },\r\n        [selectedItems, onSelect]\r\n    );\r\n\r\n    const selectedArray = selectedItems.split(\",\");\r\n    const selectables = items\r\n        .filter((item) => !selectedArray.includes(item.unique_id))\r\n        .filter(\r\n            (item) =>\r\n                item.name.toLowerCase().includes(inputValue.toLowerCase()) ||\r\n                item.unique_id.toLowerCase().includes(inputValue.toLowerCase())\r\n        );\r\n\r\n    React.useEffect(() => {\r\n        const allValues = items.map((item) => item.unique_id);\r\n        setSelectAll(allValues.length === selectedArray.length);\r\n    }, [items, selectedArray]);\r\n    const handleSelect = React.useCallback(\r\n        (item: Item) => {\r\n            const currentSelection = selectedItems.split(\",\").filter(Boolean); // Ensure no empty strings\r\n            const updatedSelection = [\r\n                ...new Set([...currentSelection, item.unique_id]),\r\n            ].join(\",\"); // Remove duplicates\r\n            onSelect(updatedSelection);\r\n        },\r\n        [selectedItems, onSelect]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Command\r\n                onKeyDown={handleKeyDown}\r\n                className=\"overflow-visible bg-transparent\"\r\n            >\r\n                <div className=\"\">\r\n                    <div className=\"items-center justify-between flex\">\r\n                        <label className=\"\">{label}</label>\r\n                        <div className=\"flex items-center space-x-2\">\r\n                            <span>Select All</span>\r\n                            <Checkbox\r\n                                checked={selectAll}\r\n                                onCheckedChange={handleSelectAll}\r\n                                className=\"form-checkbox\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex gap-2 flex-wrap overflow-y-auto max-h-[200px] group rounded-md border border-input px-3 py-2 text-sm ring-offset-background focus-within:ring-1 focus-within:ring-ring focus-within:ring-offset-1\">\r\n                        {selectedArray.map((unique_id) => {\r\n                            const item = items.find(\r\n                                (f) => f.unique_id === unique_id\r\n                            );\r\n                            return item ? (\r\n                                <Badge key={item.unique_id} variant=\"secondary\">\r\n                                    {item.name}\r\n                                    <button\r\n                                        className=\"ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\r\n                                        onKeyDown={(e) => {\r\n                                            if (e.key === \"Enter\") {\r\n                                                handleUnselect(item);\r\n                                            }\r\n                                        }}\r\n                                        onMouseDown={(e) => {\r\n                                            e.preventDefault();\r\n                                            e.stopPropagation();\r\n                                        }}\r\n                                        onClick={() => handleUnselect(item)}\r\n                                    >\r\n                                        <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\r\n                                    </button>\r\n                                </Badge>\r\n                            ) : null;\r\n                        })}\r\n                        <CommandPrimitive.Input\r\n                            ref={inputRef}\r\n                            value={inputValue}\r\n                            onValueChange={setInputValue}\r\n                            onBlur={() => setOpen(false)}\r\n                            onFocus={() => setOpen(true)}\r\n                            placeholder={`${label}...`}\r\n                            className=\"ml-2 flex-1 bg-transparent outline-none placeholder:text-muted-foreground\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"relative mt-2\">\r\n                    <CommandList>\r\n                        {open && selectables.length > 0 ? (\r\n                            <div className=\"absolute top-0 z-10 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in\">\r\n                                <CommandGroup className=\"h-full overflow-auto\">\r\n                                    {selectables.map((item) => (\r\n                                        <CommandItem\r\n                                            key={item.unique_id}\r\n                                            onMouseDown={(e) => {\r\n                                                e.preventDefault();\r\n                                                e.stopPropagation();\r\n                                            }}\r\n                                            onSelect={() => {\r\n                                                handleSelect(item);\r\n                                            }}\r\n                                            className=\"cursor-pointer\"\r\n                                        >\r\n                                            {item.name}\r\n                                        </CommandItem>\r\n                                    ))}\r\n                                </CommandGroup>\r\n                            </div>\r\n                        ) : null}\r\n                    </CommandList>\r\n                </div>\r\n                {descriptoin && (\r\n                    <p className=\"text-sm text-gray-500\">{descriptoin}</p>\r\n                )}\r\n            </Command>{\" \"}\r\n        </>\r\n    );\r\n}\r\n"],"names":["badgeVariants","cva","Badge","className","variant","props","jsx","cn","MultiSelect","items","selectedItems","onSelect","descriptoin","label","inputRef","React.useRef","open","setOpen","React.useState","inputValue","setInputValue","selectAll","setSelectAll","handleUnselect","React.useCallback","item","updatedSelection","unique_id","handleSelectAll","allValues","handleKeyDown","input","selectedArray","selectables","React.useEffect","handleSelect","currentSelection","jsxs","Fragment","Command","Checkbox","f","e","X","CommandPrimitive","CommandList","CommandGroup","CommandItem"],"mappings":"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"}