{"version":3,"file":"Form-C6VDA_Qu.js","sources":["../../../resources/js/Pages/Users/components/create/Form.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n    Select as ShadcnSelect,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue,\n} from \"@/components/ui/select\";\nimport { DomainsType, OfferType } from \"@/types\";\nimport SearchSelect from \"@/components/ui/search-select\";\nimport { PasswordInput } from \"@/components/auth/password-input\";\nimport { LabelInputContainer } from \"@/components/ui/LabelInputContainer\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport InputError from \"@/components/InputError\";\nimport { MultiSelect } from \"@/components/ui/multi-select\";\ntype RoleType = \"administrator\" | \"admin\" | \"manager\";\ninterface TagInputProps {\n    domains: DomainsType[];\n    role: any;\n    offers: OfferType[];\n    data: any;\n    errors: any;\n    setData: any;\n    update?: boolean;\n}\nconst Form: React.FC<TagInputProps> = ({\n    domains,\n    role,\n    offers,\n    data,\n    setData,\n    errors,\n    update,\n}) => {\n    // Filter domains based on search term\n\n    const getRoleOptions = (role: RoleType): string[] => {\n        switch (role) {\n            case \"administrator\":\n                return [\"admin\", \"manager\", \"user\"];\n            case \"admin\":\n                return [\"manager\", \"user\"];\n            case \"manager\":\n                return [\"user\"];\n            default:\n                return [];\n        }\n    };\n    const roleOptions = getRoleOptions(role);\n\n    return (\n        <>\n            <div className=\"w-full space-y-2\">\n                <div className=\"bg-white dark:bg-slate-800 p-2 rounded\">\n                    <div className=\"md:grid grid-cols-3 gap-2\">\n                        <div className=\"w-full\">\n                            <LabelInputContainer\n                                type=\"text\"\n                                id=\"username\"\n                                value={data.username}\n                                onChange={(e) =>\n                                    setData({\n                                        ...data,\n                                        username: e.target.value,\n                                    })\n                                }\n                                required\n                                helperText=\"eg: john doe\"\n                                className=\"col-span-2 md:col-span-1\"\n                                label=\"Username\"\n                                errorMessage={errors.username}\n                                autoFocus\n                            />\n                        </div>\n                        <div className=\"w-fu\">\n                            <LabelInputContainer\n                                type=\"email\"\n                                id=\"email\"\n                                value={data.email}\n                                onChange={(e) =>\n                                    setData({\n                                        ...data,\n                                        email: e.target.value,\n                                    })\n                                }\n                                required\n                                helperText=\"example@gmail.com\"\n                                label=\"Email\"\n                                errorMessage={errors.email}\n                            />\n                        </div>\n                        <div className=\"w-full -mt-1.5\">\n                            <Label htmlFor=\"password\">Password</Label>\n                            <PasswordInput\n                                id=\"password\"\n                                placeholder=\"********\"\n                                value={data.password}\n                                onChange={(e) =>\n                                    setData({\n                                        ...data,\n                                        password: e.target.value,\n                                    })\n                                }\n                                required={update}\n                            />\n                            <InputError message={errors.password} />\n                        </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-2\">\n                        <div className=\"w-full\">\n                            <SearchSelect\n                                items={domains}\n                                selected_value={data.domain_id}\n                                onSelect={(unique_id: string) => {\n                                    setData({ ...data, domain_id: unique_id });\n                                }}\n                                label=\"Select Domain\"\n                                errorMessage={errors.domain_id}\n                                description=\"Select a domain that you want to assing to user.\"\n                            />\n                        </div>\n                        <LabelInputContainer\n                            type=\"number\"\n                            value={data.rate}\n                            onChange={(e) =>\n                                setData({\n                                    ...data,\n                                    rate: e.target.value,\n                                })\n                            }\n                            required\n                            helperText=\"150\"\n                            label=\"Rate\"\n                            id=\"rate\"\n                            errorMessage={errors.rate}\n                        />\n                        <LabelInputContainer\n                            type=\"number\"\n                            value={data.phone}\n                            onChange={(e) =>\n                                setData({\n                                    ...data,\n                                    phone: e.target.value,\n                                })\n                            }\n                            required\n                            helperText=\"+123-456-789\"\n                            label=\"Phone\"\n                            id=\"phone\"\n                            errorMessage={errors.phone}\n                        />\n                        <LabelInputContainer\n                            type=\"number\"\n                            value={data.skype}\n                            onChange={(e) =>\n                                setData({\n                                    ...data,\n                                    skype: e.target.value,\n                                })\n                            }\n                            required\n                            helperText=\"+123-456-789\"\n                            label=\"Skype\"\n                            id=\"skype\"\n                            errorMessage={errors.skype}\n                        />\n                    </div>\n                    <div className=\"w-full\">\n                        <Label htmlFor=\"message\">About:</Label>\n                        <Textarea\n                            name=\"message\"\n                            placeholder=\"Something about user...\"\n                            id=\"message\"\n                            onChange={(e) =>\n                                setData({\n                                    ...data,\n                                    details: e.target.value,\n                                })\n                            }\n                            required\n                            value={data.details}\n                        />\n                        <InputError message={errors.details} />\n                    </div>\n                    <MultiSelect\n                        items={offers}\n                        selectedItems={data.offer_ids}\n                        onSelect={(unique_ids: string) =>\n                            setData({ ...data, offer_ids: unique_ids })\n                        }\n                        label=\"Select Offers\"\n                        descriptoin=\"Select offers that you want to assign to this user.\"\n                    />\n                    <InputError message={errors.offer_ids} />\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                        <div className=\"w-full \">\n                            <Label htmlFor=\"message\">\n                                Allow notifications:\n                            </Label>\n                            <ShadcnSelect\n                                required\n                                value={data.notification}\n                                onValueChange={(notification) =>\n                                    setData({ ...data, notification })\n                                }\n                            >\n                                <SelectTrigger className=\"h-9 my-1\">\n                                    <SelectValue placeholder=\"Allow notification\" />\n                                </SelectTrigger>\n                                <SelectContent side=\"top\">\n                                    {[\"yes\", \"no\"].map((notifyOption) => (\n                                        <SelectItem\n                                            key={notifyOption}\n                                            value={notifyOption}\n                                        >\n                                            {notifyOption}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </ShadcnSelect>\n                            <InputError message={errors.notification} />\n                        </div>\n                        <div className=\"w-full \">\n                            <Label htmlFor=\"message\">Role:</Label>\n                            <ShadcnSelect\n                                required\n                                value={data.role}\n                                onValueChange={(role) =>\n                                    setData({ ...data, role })\n                                }\n                            >\n                                <SelectTrigger className=\"h-9 my-1\">\n                                    <SelectValue placeholder=\"Select role\" />\n                                </SelectTrigger>\n                                <SelectContent side=\"top\">\n                                    {roleOptions.map((roleOption) => (\n                                        <SelectItem\n                                            key={roleOption}\n                                            value={roleOption}\n                                        >\n                                            {roleOption}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </ShadcnSelect>\n                            <InputError message={errors.role} />\n                        </div>\n                        <div className=\"w-full \">\n                            <Label htmlFor=\"message\">Is verified:</Label>\n                            <ShadcnSelect\n                                required\n                                value={data.isVerified}\n                                onValueChange={(isVerified) =>\n                                    setData({ ...data, isVerified })\n                                }\n                            >\n                                <SelectTrigger className=\"h-9 my-1\">\n                                    <SelectValue placeholder=\"Email verfication\" />\n                                </SelectTrigger>\n                                <SelectContent side=\"top\">\n                                    {[\"yes\", \"no\"].map((verifyOption) => (\n                                        <SelectItem\n                                            key={verifyOption}\n                                            value={verifyOption}\n                                        >\n                                            {verifyOption}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </ShadcnSelect>\n                            <InputError message={errors.isVerified} />\n                        </div>\n                        <div className=\"w-full \">\n                            <Label htmlFor=\"message\">Status:</Label>\n                            <ShadcnSelect\n                                required\n                                value={data.status}\n                                onValueChange={(status) =>\n                                    setData({ ...data, status })\n                                }\n                            >\n                                <SelectTrigger className=\"h-9 my-1\">\n                                    <SelectValue placeholder=\"Select status\" />\n                                </SelectTrigger>\n                                <SelectContent side=\"top\">\n                                    {[\"active\", \"inactive\", \"banned\"].map(\n                                        (statusOption) => (\n                                            <SelectItem\n                                                key={statusOption}\n                                                value={statusOption}\n                                            >\n                                                {statusOption}\n                                            </SelectItem>\n                                        ),\n                                    )}\n                                </SelectContent>\n                            </ShadcnSelect>\n                            <InputError message={errors.status} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Form;\n"],"names":["Form","domains","role","offers","data","setData","errors","update","roleOptions","jsx","Fragment","jsxs","LabelInputContainer","e","Label","PasswordInput","InputError","SearchSelect","unique_id","Textarea","MultiSelect","unique_ids","ShadcnSelect","notification","SelectTrigger","SelectValue","SelectContent","notifyOption","SelectItem","roleOption","isVerified","verifyOption","status","statusOption"],"mappings":"y/BA0BA,MAAMA,EAAgC,CAAC,CACnC,QAAAC,EACA,KAAAC,EACA,OAAAC,EACA,KAAAC,EACA,QAAAC,EACA,OAAAC,EACA,OAAAC,CACJ,IAAM,CAeI,MAAAC,GAZkBN,GAA6B,CACjD,OAAQA,EAAM,CACV,IAAK,gBACM,MAAA,CAAC,QAAS,UAAW,MAAM,EACtC,IAAK,QACM,MAAA,CAAC,UAAW,MAAM,EAC7B,IAAK,UACD,MAAO,CAAC,MAAM,EAClB,QACI,MAAO,CAAC,CAAA,CAEpB,GACmCA,CAAI,EAGnC,OAAAO,EAAAA,IAAAC,EAAAA,SAAA,CACI,eAAC,MAAI,CAAA,UAAU,mBACX,SAACC,EAAAA,KAAA,MAAA,CAAI,UAAU,yCACX,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,4BACX,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAU,SACX,SAAAA,EAAA,IAACG,EAAA,CACG,KAAK,OACL,GAAG,WACH,MAAOR,EAAK,SACZ,SAAWS,GACPR,EAAQ,CACJ,GAAGD,EACH,SAAUS,EAAE,OAAO,KAAA,CACtB,EAEL,SAAQ,GACR,WAAW,eACX,UAAU,2BACV,MAAM,WACN,aAAcP,EAAO,SACrB,UAAS,EAAA,CAAA,EAEjB,EACAG,EAAAA,IAAC,MAAI,CAAA,UAAU,OACX,SAAAA,EAAA,IAACG,EAAA,CACG,KAAK,QACL,GAAG,QACH,MAAOR,EAAK,MACZ,SAAWS,GACPR,EAAQ,CACJ,GAAGD,EACH,MAAOS,EAAE,OAAO,KAAA,CACnB,EAEL,SAAQ,GACR,WAAW,oBACX,MAAM,QACN,aAAcP,EAAO,KAAA,CAAA,EAE7B,EACAK,EAAAA,KAAC,MAAI,CAAA,UAAU,iBACX,SAAA,CAACF,EAAA,IAAAK,EAAA,CAAM,QAAQ,WAAW,SAAQ,WAAA,EAClCL,EAAA,IAACM,EAAA,CACG,GAAG,WACH,YAAY,WACZ,MAAOX,EAAK,SACZ,SAAWS,GACPR,EAAQ,CACJ,GAAGD,EACH,SAAUS,EAAE,OAAO,KAAA,CACtB,EAEL,SAAUN,CAAA,CACd,EACCE,EAAAA,IAAAO,EAAA,CAAW,QAASV,EAAO,QAAU,CAAA,CAAA,CAC1C,CAAA,CAAA,EACJ,EACAK,EAAAA,KAAC,MAAI,CAAA,UAAU,uDACX,SAAA,CAACF,EAAAA,IAAA,MAAA,CAAI,UAAU,SACX,SAAAA,EAAA,IAACQ,EAAA,CACG,MAAOhB,EACP,eAAgBG,EAAK,UACrB,SAAWc,GAAsB,CAC7Bb,EAAQ,CAAE,GAAGD,EAAM,UAAWc,EAAW,CAC7C,EACA,MAAM,gBACN,aAAcZ,EAAO,UACrB,YAAY,kDAAA,CAAA,EAEpB,EACAG,EAAA,IAACG,EAAA,CACG,KAAK,SACL,MAAOR,EAAK,KACZ,SAAWS,GACPR,EAAQ,CACJ,GAAGD,EACH,KAAMS,EAAE,OAAO,KAAA,CAClB,EAEL,SAAQ,GACR,WAAW,MACX,MAAM,OACN,GAAG,OACH,aAAcP,EAAO,IAAA,CACzB,EACAG,EAAA,IAACG,EAAA,CACG,KAAK,SACL,MAAOR,EAAK,MACZ,SAAWS,GACPR,EAAQ,CACJ,GAAGD,EACH,MAAOS,EAAE,OAAO,KAAA,CACnB,EAEL,SAAQ,GACR,WAAW,eACX,MAAM,QACN,GAAG,QACH,aAAcP,EAAO,KAAA,CACzB,EACAG,EAAA,IAACG,EAAA,CACG,KAAK,SACL,MAAOR,EAAK,MACZ,SAAWS,GACPR,EAAQ,CACJ,GAAGD,EACH,MAAOS,EAAE,OAAO,KAAA,CACnB,EAEL,SAAQ,GACR,WAAW,eACX,MAAM,QACN,GAAG,QACH,aAAcP,EAAO,KAAA,CAAA,CACzB,EACJ,EACAK,EAAAA,KAAC,MAAI,CAAA,UAAU,SACX,SAAA,CAACF,EAAA,IAAAK,EAAA,CAAM,QAAQ,UAAU,SAAM,SAAA,EAC/BL,EAAA,IAACU,EAAA,CACG,KAAK,UACL,YAAY,0BACZ,GAAG,UACH,SAAWN,GACPR,EAAQ,CACJ,GAAGD,EACH,QAASS,EAAE,OAAO,KAAA,CACrB,EAEL,SAAQ,GACR,MAAOT,EAAK,OAAA,CAChB,EACCK,EAAAA,IAAAO,EAAA,CAAW,QAASV,EAAO,OAAS,CAAA,CAAA,EACzC,EACAG,EAAA,IAACW,EAAA,CACG,MAAOjB,EACP,cAAeC,EAAK,UACpB,SAAWiB,GACPhB,EAAQ,CAAE,GAAGD,EAAM,UAAWiB,EAAY,EAE9C,MAAM,gBACN,YAAY,qDAAA,CAChB,EACCZ,EAAAA,IAAAO,EAAA,CAAW,QAASV,EAAO,SAAW,CAAA,EACvCK,EAAAA,KAAC,MAAI,CAAA,UAAU,uDACX,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,UACX,SAAA,CAACF,EAAA,IAAAK,EAAA,CAAM,QAAQ,UAAU,SAEzB,uBAAA,EACAH,EAAA,KAACW,EAAA,CACG,SAAQ,GACR,MAAOlB,EAAK,aACZ,cAAgBmB,GACZlB,EAAQ,CAAE,GAAGD,EAAM,aAAAmB,EAAc,EAGrC,SAAA,CAAAd,EAAAA,IAACe,GAAc,UAAU,WACrB,eAACC,EAAY,CAAA,YAAY,qBAAqB,CAClD,CAAA,EACAhB,EAAAA,IAACiB,EAAc,CAAA,KAAK,MACf,SAAA,CAAC,MAAO,IAAI,EAAE,IAAKC,GAChBlB,EAAA,IAACmB,EAAA,CAEG,MAAOD,EAEN,SAAAA,CAAA,EAHIA,CAAA,CAKZ,CACL,CAAA,CAAA,CAAA,CACJ,EACClB,EAAAA,IAAAO,EAAA,CAAW,QAASV,EAAO,YAAc,CAAA,CAAA,EAC9C,EACAK,EAAAA,KAAC,MAAI,CAAA,UAAU,UACX,SAAA,CAACF,EAAA,IAAAK,EAAA,CAAM,QAAQ,UAAU,SAAK,QAAA,EAC9BH,EAAA,KAACW,EAAA,CACG,SAAQ,GACR,MAAOlB,EAAK,KACZ,cAAgBF,GACZG,EAAQ,CAAE,GAAGD,EAAM,KAAAF,EAAM,EAG7B,SAAA,CAAAO,EAAAA,IAACe,GAAc,UAAU,WACrB,eAACC,EAAY,CAAA,YAAY,cAAc,CAC3C,CAAA,QACCC,EAAc,CAAA,KAAK,MACf,SAAYlB,EAAA,IAAKqB,GACdpB,EAAA,IAACmB,EAAA,CAEG,MAAOC,EAEN,SAAAA,CAAA,EAHIA,CAAA,CAKZ,CACL,CAAA,CAAA,CAAA,CACJ,EACCpB,EAAAA,IAAAO,EAAA,CAAW,QAASV,EAAO,IAAM,CAAA,CAAA,EACtC,EACAK,EAAAA,KAAC,MAAI,CAAA,UAAU,UACX,SAAA,CAACF,EAAA,IAAAK,EAAA,CAAM,QAAQ,UAAU,SAAY,eAAA,EACrCH,EAAA,KAACW,EAAA,CACG,SAAQ,GACR,MAAOlB,EAAK,WACZ,cAAgB0B,GACZzB,EAAQ,CAAE,GAAGD,EAAM,WAAA0B,EAAY,EAGnC,SAAA,CAAArB,EAAAA,IAACe,GAAc,UAAU,WACrB,eAACC,EAAY,CAAA,YAAY,oBAAoB,CACjD,CAAA,EACAhB,EAAAA,IAACiB,EAAc,CAAA,KAAK,MACf,SAAA,CAAC,MAAO,IAAI,EAAE,IAAKK,GAChBtB,EAAA,IAACmB,EAAA,CAEG,MAAOG,EAEN,SAAAA,CAAA,EAHIA,CAAA,CAKZ,CACL,CAAA,CAAA,CAAA,CACJ,EACCtB,EAAAA,IAAAO,EAAA,CAAW,QAASV,EAAO,UAAY,CAAA,CAAA,EAC5C,EACAK,EAAAA,KAAC,MAAI,CAAA,UAAU,UACX,SAAA,CAACF,EAAA,IAAAK,EAAA,CAAM,QAAQ,UAAU,SAAO,UAAA,EAChCH,EAAA,KAACW,EAAA,CACG,SAAQ,GACR,MAAOlB,EAAK,OACZ,cAAgB4B,GACZ3B,EAAQ,CAAE,GAAGD,EAAM,OAAA4B,EAAQ,EAG/B,SAAA,CAAAvB,EAAAA,IAACe,GAAc,UAAU,WACrB,eAACC,EAAY,CAAA,YAAY,gBAAgB,CAC7C,CAAA,EACAhB,MAACiB,GAAc,KAAK,MACf,UAAC,SAAU,WAAY,QAAQ,EAAE,IAC7BO,GACGxB,EAAA,IAACmB,EAAA,CAEG,MAAOK,EAEN,SAAAA,CAAA,EAHIA,CAAA,CAIT,CAGZ,CAAA,CAAA,CAAA,CACJ,EACCxB,EAAAA,IAAAO,EAAA,CAAW,QAASV,EAAO,MAAQ,CAAA,CAAA,CACxC,CAAA,CAAA,CACJ,CAAA,CAAA,CACJ,CAAA,CACJ,CAAA,EACJ,CAER"}