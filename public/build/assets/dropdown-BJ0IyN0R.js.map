{"version":3,"file":"dropdown-BJ0IyN0R.js","sources":["../../../resources/js/Pages/Settings/Account/Partials/dropdown.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuLabel,\n    DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { MoreHorizontal } from \"lucide-react\";\nimport {\n    Credenza,\n    CredenzaClose,\n    CredenzaContent,\n    CredenzaHeader,\n    CredenzaTitle,\n    CredenzaDescription,\n} from \"@/components/ui/credenza\";\nimport { useForm } from \"@inertiajs/react\";\nimport { toast } from \"sonner\";\nimport { ReloadIcon } from \"@radix-ui/react-icons\";\nimport { FaTrashAlt } from \"react-icons/fa\";\nimport UpdateValue from \"./UpdateValue\";\n\ninterface DropdownProps {\n    rowCurrent: any;\n    error?: string;\n}\n\nexport default function Dropdown({ rowCurrent, error }: DropdownProps) {\n    const [deleteOpen, setDeleteOpen] = useState(false);\n    const { processing, delete: destroy } = useForm();\n    const deleteRow = (uniqueId: string) => {\n        destroy(`/settings/account/${uniqueId}`, {\n            onSuccess: () => {\n                toast.success(\"Value deleted successfully\");\n            },\n            onError: () => {\n                toast.error(\"Failed to delete Value.\");\n            },\n        });\n    };\n\n    return (\n        <>\n            <div>\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <button className=\"focus:outline-none\">\n                            <span className=\"sr-only\">Open menu</span>\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                        </button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\">\n                        <DropdownMenuLabel>Actions</DropdownMenuLabel>\n                        <UpdateValue error={error} rowCurrent={rowCurrent} />\n                        <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"py-1 w-full m-0 flex gap-4 text-red-600 hover:text-red-500\"\n                            onClick={() => setDeleteOpen(true)}\n                        >\n                            Delete\n                            <FaTrashAlt size={11} />\n                        </Button>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n            <Credenza open={deleteOpen} onOpenChange={setDeleteOpen}>\n                <CredenzaContent>\n                    <CredenzaHeader>\n                        <CredenzaTitle>\n                            Are you sure you want to delete?\n                        </CredenzaTitle>\n                        <CredenzaDescription>\n                            This action cannot be undone. You are about to\n                            delete ({rowCurrent.key})\n                        </CredenzaDescription>\n                    </CredenzaHeader>\n                    <div className=\"flex justify-between flex-col gap-2 p-2\">\n                        <Button\n                            className=\"w-full\"\n                            variant=\"destructive\"\n                            disabled={processing}\n                            onClick={() => deleteRow(rowCurrent.id)}\n                        >\n                            {processing ? (\n                                <>\n                                    <ReloadIcon className=\"mr-2 h-4 w-4 animate-spin\" />\n                                    Deleting\n                                </>\n                            ) : (\n                                \"Yes Delete\"\n                            )}\n                        </Button>\n                        <CredenzaClose className=\"w-full\">Cancel</CredenzaClose>\n                    </div>\n                </CredenzaContent>\n            </Credenza>\n        </>\n    );\n}\n"],"names":["Dropdown","rowCurrent","error","deleteOpen","setDeleteOpen","useState","processing","destroy","useForm","deleteRow","uniqueId","toast","jsxs","Fragment","jsx","DropdownMenu","DropdownMenuTrigger","MoreHorizontal","DropdownMenuContent","DropdownMenuLabel","UpdateValue","Button","FaTrashAlt","Credenza","CredenzaContent","CredenzaHeader","CredenzaTitle","CredenzaDescription","ReloadIcon","CredenzaClose"],"mappings":"m3BA+BA,SAAwBA,EAAS,CAAE,WAAAC,EAAY,MAAAC,GAAwB,CACnE,KAAM,CAACC,EAAYC,CAAa,EAAIC,EAAAA,SAAS,EAAK,EAC5C,CAAE,WAAAC,EAAY,OAAQC,CAAA,EAAYC,EAAQ,EAC1CC,EAAaC,GAAqB,CAC5BH,EAAA,qBAAqBG,CAAQ,GAAI,CACrC,UAAW,IAAM,CACbC,EAAM,QAAQ,4BAA4B,CAC9C,EACA,QAAS,IAAM,CACXA,EAAM,MAAM,yBAAyB,CAAA,CACzC,CACH,CACL,EAEA,OAEQC,EAAA,KAAAC,WAAA,CAAA,SAAA,CAACC,EAAA,IAAA,MAAA,CACG,gBAACC,EACG,CAAA,SAAA,CAAAD,EAAAA,IAACE,GAAoB,QAAO,GACxB,SAACJ,EAAA,KAAA,SAAA,CAAO,UAAU,qBACd,SAAA,CAACE,EAAA,IAAA,OAAA,CAAK,UAAU,UAAU,SAAS,YAAA,EACnCA,EAAAA,IAACG,EAAe,CAAA,UAAU,SAAU,CAAA,CAAA,CAAA,CACxC,CACJ,CAAA,EACAL,EAAAA,KAACM,EAAoB,CAAA,MAAM,MACvB,SAAA,CAAAJ,EAAAA,IAACK,GAAkB,SAAO,SAAA,CAAA,EAC1BL,EAAAA,IAACM,EAAY,CAAA,MAAAlB,EAAc,WAAAD,CAAwB,CAAA,EACnDW,EAAA,KAACS,EAAA,CACG,QAAQ,QACR,KAAK,KACL,UAAU,6DACV,QAAS,IAAMjB,EAAc,EAAI,EACpC,SAAA,CAAA,SAEGU,EAAAA,IAACQ,EAAW,CAAA,KAAM,EAAI,CAAA,CAAA,CAAA,CAAA,CAC1B,CACJ,CAAA,CAAA,CAAA,CACJ,CACJ,CAAA,QACCC,EAAS,CAAA,KAAMpB,EAAY,aAAcC,EACtC,gBAACoB,EACG,CAAA,SAAA,CAAAZ,OAACa,EACG,CAAA,SAAA,CAAAX,EAAAA,IAACY,GAAc,SAEf,kCAAA,CAAA,SACCC,EAAoB,CAAA,SAAA,CAAA,0DAER1B,EAAW,IAAI,GAAA,CAC5B,CAAA,CAAA,EACJ,EACAW,EAAAA,KAAC,MAAI,CAAA,UAAU,0CACX,SAAA,CAAAE,EAAA,IAACO,EAAA,CACG,UAAU,SACV,QAAQ,cACR,SAAUf,EACV,QAAS,IAAMG,EAAUR,EAAW,EAAE,EAErC,WAEOW,EAAAA,KAAAC,EAAA,SAAA,CAAA,SAAA,CAACC,EAAAA,IAAAc,EAAA,CAAW,UAAU,2BAA4B,CAAA,EAAE,UAAA,CAAA,CAExD,EAEA,YAAA,CAER,EACCd,EAAA,IAAAe,EAAA,CAAc,UAAU,SAAS,SAAM,QAAA,CAAA,CAAA,CAC5C,CAAA,CAAA,CAAA,CACJ,CACJ,CAAA,CAAA,EACJ,CAER"}