{"version":3,"file":"columns-pBRuTy6H.js","sources":["../../../resources/js/components/ui/CopyInput.tsx","../../../resources/js/Pages/Offers/components/columns.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { Input } from \"../ui/input\";\r\nimport { toast } from \"sonner\";\r\n\r\nexport default function CopyInput({ url }: { url: string }) {\r\n    const handleCopy = () => {\r\n        navigator.clipboard\r\n            .writeText(url)\r\n            .then(() => {\r\n                toast.info(\"Offer url copied to clipboard!\");\r\n            })\r\n            .catch((err) => {\r\n                toast.error(\"Failed to copy!\", err);\r\n            });\r\n    };\r\n    return (\r\n        <div>\r\n            <Input\r\n                type=\"url\"\r\n                value={url}\r\n                className=\"w-[300px] bg-muted\"\r\n                onClick={handleCopy}\r\n                readOnly\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import { ColumnDef } from \"@tanstack/react-table\";\r\nimport { ArrowUpDown } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport Dropdown from \"./dropdown\";\r\nimport { OfferType } from \"@/types\";\r\nimport CopyInput from \"@/components/ui/CopyInput\";\r\n\r\nexport const Columns = (role: string): ColumnDef<OfferType>[] => [\r\n    {\r\n        id: \"select\",\r\n        header: ({ table }) => (\r\n            <Checkbox\r\n                checked={\r\n                    table.getIsAllPageRowsSelected() ||\r\n                    (table.getIsSomePageRowsSelected() && \"indeterminate\")\r\n                }\r\n                onCheckedChange={(value) =>\r\n                    table.toggleAllPageRowsSelected(!!value)\r\n                }\r\n                aria-label=\"Select all\"\r\n            />\r\n        ),\r\n        cell: ({ row }) => (\r\n            <Checkbox\r\n                checked={row.getIsSelected()}\r\n                onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n                aria-label=\"Select row\"\r\n            />\r\n        ),\r\n        enableSorting: false,\r\n        enableHiding: false,\r\n    },\r\n    {\r\n        accessorKey: \"id\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    ID\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n        cell: (info) => info.row.index + 1,\r\n    },\r\n    {\r\n        accessorKey: \"nameWithCountries\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Offer Name\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"age\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Age\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"rate\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Rate\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"clicks\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Clicks\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"conversions\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Conversions\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"cvr\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    CVR\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"url\",\r\n        header: \"OfferLink\",\r\n        cell: ({ row }) => {\r\n            const url = String(row.getValue(\"url\"));\r\n            return (\r\n                <>\r\n                    <CopyInput url={url} />\r\n                </>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"created_at\",\r\n        header: \"Create At\",\r\n        cell: ({ row }) => {\r\n            const date = new Date(row.getValue(\"created_at\"));\r\n            const formated = date.toLocaleDateString();\r\n            return <div className=\"font-medium\">{formated}</div>;\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"updated_at\",\r\n        header: \"Updated At\",\r\n        cell: ({ row }) => {\r\n            const date = new Date(row.getValue(\"updated_at\"));\r\n            const formated = date.toLocaleDateString();\r\n            return <div className=\"font-medium\">{formated}</div>;\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"status\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Status\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n        cell: ({ row }) => {\r\n            const status = String(row.getValue(\"status\"));\r\n            return (\r\n                <>\r\n                    {status === \"active\" ? (\r\n                        <div className=\"text-green-500\">Active</div>\r\n                    ) : status === \"paused\" ? (\r\n                        <div className=\"text-blue-500\">Paused</div>\r\n                    ) : (\r\n                        <div className=\"text-red-500\">Inactive</div>\r\n                    )}\r\n                </>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        header: \"Actions\",\r\n        id: \"actions\",\r\n        cell: ({ row }) => {\r\n            const rowCurrent = row.original;\r\n            return (\r\n                <>\r\n                    <Dropdown role={role} rowCurrent={rowCurrent} />\r\n                </>\r\n            );\r\n        },\r\n    },\r\n];\r\n"],"names":["CopyInput","url","handleCopy","toast","err","jsx","Input","Columns","role","table","Checkbox","value","row","column","jsxs","Button","ArrowUpDown","info","Fragment","formated","status","rowCurrent","Dropdown"],"mappings":"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"}