{"version":3,"file":"columns-iBEp_t4w.js","sources":["../../../resources/js/components/ui/profile_pic.tsx","../../../resources/js/Pages/Users/components/columns.tsx"],"sourcesContent":["import { CircleUser } from \"lucide-react\";\r\nexport default function ProfilePic({ path }: { path: string }) {\r\n    return (\r\n        <div className=\"w-9 h-9 rounded-full border overflow-hidden flex items-center justify-center\">\r\n            {path ? (\r\n                <img src={path} alt=\"logo\" className=\"w-7 h-7 rounded-full\" />\r\n            ) : (\r\n                <CircleUser className=\"h-5 w-5\" />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { ColumnDef } from \"@tanstack/react-table\";\r\nimport { ArrowUpDown } from \"lucide-react\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport Dropdown from \"./dropdown\";\r\nimport { UserType } from \"@/types\";\r\nimport ProfilePic from \"@/components/ui/profile_pic\";\r\n\r\nexport const Columns = (role: string): ColumnDef<UserType>[] => [\r\n    {\r\n        id: \"select\",\r\n        header: ({ table }) => (\r\n            <Checkbox\r\n                checked={\r\n                    table.getIsAllPageRowsSelected() ||\r\n                    (table.getIsSomePageRowsSelected() && \"indeterminate\")\r\n                }\r\n                onCheckedChange={(value) =>\r\n                    table.toggleAllPageRowsSelected(!!value)\r\n                }\r\n                aria-label=\"Select all\"\r\n            />\r\n        ),\r\n        cell: ({ row }) => (\r\n            <Checkbox\r\n                checked={row.getIsSelected()}\r\n                onCheckedChange={(value) => row.toggleSelected(!!value)}\r\n                aria-label=\"Select row\"\r\n            />\r\n        ),\r\n        enableSorting: false,\r\n        enableHiding: false,\r\n    },\r\n    {\r\n        accessorKey: \"id\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    ID\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n        cell: (info) => info.row.index + 1,\r\n    },\r\n    {\r\n        accessorKey: \"profile_image\",\r\n        header: \"Profile Pic\",\r\n        cell: ({ row }) => {\r\n            const path = String(row.getValue(\"profile_image\"));\r\n\r\n            return (\r\n                <>\r\n                    <ProfilePic path={path} />\r\n                </>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"name\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Name\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"username\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Username\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"email\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Email\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"phone\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Phone\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"age\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Age\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"rate\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Rate\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"clicks\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Clicks\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"conversions\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Conversions\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"cvr\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    CVR\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"role\",\r\n        header: \"Role\",\r\n        cell: ({ row }) => {\r\n            const role = String(row.getValue(\"role\"));\r\n            return (\r\n                <>\r\n                    {role === \"admin\" ? (\r\n                        <div className=\"text-green-500\">Admin</div>\r\n                    ) : role === \"manager\" ? (\r\n                        <div className=\"text-blue-500\">Manager</div>\r\n                    ) : (\r\n                        <div className=\"text-red-500\">User</div>\r\n                    )}\r\n                </>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"manager_username\",\r\n        header: \"Manager is\",\r\n    },\r\n    {\r\n        accessorKey: \"admin_username\",\r\n        header: \"Admin is\",\r\n    },\r\n    {\r\n        accessorKey: \"created_at\",\r\n        header: \"Create At\",\r\n        cell: ({ row }) => {\r\n            const date = new Date(row.getValue(\"created_at\"));\r\n            const formated = date.toLocaleDateString();\r\n            return <div className=\"font-medium\">{formated}</div>;\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"updated_at\",\r\n        header: \"Updated At\",\r\n        cell: ({ row }) => {\r\n            const date = new Date(row.getValue(\"updated_at\"));\r\n            const formated = date.toLocaleDateString();\r\n            return <div className=\"font-medium\">{formated}</div>;\r\n        },\r\n    },\r\n    {\r\n        accessorKey: \"status\",\r\n        header: ({ column }) => {\r\n            return (\r\n                <Button\r\n                    variant=\"ghost\"\r\n                    onClick={() =>\r\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\r\n                    }\r\n                >\r\n                    Status\r\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\r\n                </Button>\r\n            );\r\n        },\r\n        cell: ({ row }) => {\r\n            const status = String(row.getValue(\"status\"));\r\n            return (\r\n                <>\r\n                    {status === \"active\" ? (\r\n                        <div className=\"text-green-500\">Active</div>\r\n                    ) : status === \"paused\" ? (\r\n                        <div className=\"text-blue-500\">Paused</div>\r\n                    ) : (\r\n                        <div className=\"text-red-500\">Inactive</div>\r\n                    )}\r\n                </>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        header: \"Actions\",\r\n        id: \"actions\",\r\n        cell: ({ row }) => {\r\n            const rowCurrent = row.original;\r\n            return <Dropdown rowCurrent={rowCurrent} role={role} />;\r\n        },\r\n    },\r\n];\r\n"],"names":["ProfilePic","path","jsx","CircleUser","Columns","role","table","Checkbox","value","row","column","jsxs","Button","ArrowUpDown","info","Fragment","formated","status","rowCurrent","Dropdown"],"mappings":"yrCACwB,SAAAA,EAAW,CAAE,KAAAC,GAA0B,CAC3D,aACK,MAAI,CAAA,UAAU,+EACV,SACGA,EAAAC,EAAA,IAAC,OAAI,IAAKD,EAAM,IAAI,OAAO,UAAU,sBAAuB,CAAA,QAE3DE,EAAW,CAAA,UAAU,SAAU,CAAA,CAExC,CAAA,CAER,CCFa,MAAAC,EAAWC,GAAwC,CAC5D,CACI,GAAI,SACJ,OAAQ,CAAC,CAAE,MAAAC,CAAA,IACPJ,EAAA,IAACK,EAAA,CACG,QACID,EAAM,yBAAA,GACLA,EAAM,0BAA+B,GAAA,gBAE1C,gBAAkBE,GACdF,EAAM,0BAA0B,CAAC,CAACE,CAAK,EAE3C,aAAW,YAAA,CACf,EAEJ,KAAM,CAAC,CAAE,IAAAC,CAAA,IACLP,EAAA,IAACK,EAAA,CACG,QAASE,EAAI,cAAc,EAC3B,gBAAkBD,GAAUC,EAAI,eAAe,CAAC,CAACD,CAAK,EACtD,aAAW,YAAA,CACf,EAEJ,cAAe,GACf,aAAc,EAClB,EACA,CACI,YAAa,KACb,OAAQ,CAAC,CAAE,OAAAE,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,KAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,EAIlD,KAAOC,GAASA,EAAK,IAAI,MAAQ,CACrC,EACA,CACI,YAAa,gBACb,OAAQ,cACR,KAAM,CAAC,CAAE,IAAAL,KAAU,CACf,MAAMR,EAAO,OAAOQ,EAAI,SAAS,eAAe,CAAC,EAEjD,OAEQP,EAAA,IAAAa,WAAA,CAAA,SAAAb,EAAAA,IAACF,EAAW,CAAA,KAAAC,EAAY,CAC5B,CAAA,CAER,CACJ,EACA,CACI,YAAa,OACb,OAAQ,CAAC,CAAE,OAAAS,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,OAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,CAItD,EACA,CACI,YAAa,WACb,OAAQ,CAAC,CAAE,OAAAH,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,WAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,CAItD,EACA,CACI,YAAa,QACb,OAAQ,CAAC,CAAE,OAAAH,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,QAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,CAItD,EACA,CACI,YAAa,QACb,OAAQ,CAAC,CAAE,OAAAH,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,QAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,CAItD,EACA,CACI,YAAa,MACb,OAAQ,CAAC,CAAE,OAAAH,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,MAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,CAItD,EACA,CACI,YAAa,OACb,OAAQ,CAAC,CAAE,OAAAH,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,OAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,CAItD,EACA,CACI,YAAa,SACb,OAAQ,CAAC,CAAE,OAAAH,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,SAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,CAItD,EACA,CACI,YAAa,cACb,OAAQ,CAAC,CAAE,OAAAH,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,cAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,CAItD,EACA,CACI,YAAa,MACb,OAAQ,CAAC,CAAE,OAAAH,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,MAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,CAItD,EACA,CACI,YAAa,OACb,OAAQ,OACR,KAAM,CAAC,CAAE,IAAAJ,KAAU,CACf,MAAMJ,EAAO,OAAOI,EAAI,SAAS,MAAM,CAAC,EAEpC,OAAAP,EAAAA,IAAAa,EAAAA,SAAA,CACK,SAAAV,IAAS,cACL,MAAI,CAAA,UAAU,iBAAiB,SAAA,OAAK,CAAA,EACrCA,IAAS,UACRH,EAAA,IAAA,MAAA,CAAI,UAAU,gBAAgB,SAAO,SAAA,CAAA,QAErC,MAAI,CAAA,UAAU,eAAe,SAAA,MAAA,CAAI,CAE1C,CAAA,CAER,CACJ,EACA,CACI,YAAa,mBACb,OAAQ,YACZ,EACA,CACI,YAAa,iBACb,OAAQ,UACZ,EACA,CACI,YAAa,aACb,OAAQ,YACR,KAAM,CAAC,CAAE,IAAAO,KAAU,CAET,MAAAO,EADO,IAAI,KAAKP,EAAI,SAAS,YAAY,CAAC,EAC1B,qBACtB,OAAQP,EAAAA,IAAA,MAAA,CAAI,UAAU,cAAe,SAASc,CAAA,CAAA,CAClD,CACJ,EACA,CACI,YAAa,aACb,OAAQ,aACR,KAAM,CAAC,CAAE,IAAAP,KAAU,CAET,MAAAO,EADO,IAAI,KAAKP,EAAI,SAAS,YAAY,CAAC,EAC1B,qBACtB,OAAQP,EAAAA,IAAA,MAAA,CAAI,UAAU,cAAe,SAASc,CAAA,CAAA,CAClD,CACJ,EACA,CACI,YAAa,SACb,OAAQ,CAAC,CAAE,OAAAN,KAEHC,EAAA,KAACC,EAAA,CACG,QAAQ,QACR,QAAS,IACLF,EAAO,cAAcA,EAAO,gBAAkB,KAAK,EAE1D,SAAA,CAAA,SAEGR,EAAAA,IAACW,EAAY,CAAA,UAAU,cAAe,CAAA,CAAA,CAAA,CAAA,EAIlD,KAAM,CAAC,CAAE,IAAAJ,KAAU,CACf,MAAMQ,EAAS,OAAOR,EAAI,SAAS,QAAQ,CAAC,EAExC,OAAAP,EAAAA,IAAAa,EAAAA,SAAA,CACK,aAAW,SACRb,EAAA,IAAC,OAAI,UAAU,iBAAiB,SAAM,QAAA,CAAA,EACtCe,IAAW,eACV,MAAI,CAAA,UAAU,gBAAgB,SAAM,QAAA,CAAA,QAEpC,MAAI,CAAA,UAAU,eAAe,SAAA,UAAA,CAAQ,CAE9C,CAAA,CAER,CACJ,EACA,CACI,OAAQ,UACR,GAAI,UACJ,KAAM,CAAC,CAAE,IAAAR,KAAU,CACf,MAAMS,EAAaT,EAAI,SAChB,OAAAP,EAAA,IAACiB,EAAS,CAAA,WAAAD,EAAwB,KAAAb,CAAY,CAAA,CACzD,CACJ,CACJ"}