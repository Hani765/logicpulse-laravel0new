{"version":3,"file":"columns-DfwBECuj.js","sources":["../../../resources/js/Pages/Sources/components/columns.tsx"],"sourcesContent":["import { ColumnDef } from \"@tanstack/react-table\";\nimport { ArrowUpDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport Dropdown from \"./dropdown\";\nimport { TrackerType } from \"@/types\";\n\nexport const Columns = (): ColumnDef<TrackerType>[] => [\n    {\n        id: \"select\",\n        header: ({ table }) => (\n            <Checkbox\n                checked={\n                    table.getIsAllPageRowsSelected() ||\n                    (table.getIsSomePageRowsSelected() && \"indeterminate\")\n                }\n                onCheckedChange={(value) =>\n                    table.toggleAllPageRowsSelected(!!value)\n                }\n                aria-label=\"Select all\"\n            />\n        ),\n        cell: ({ row }) => (\n            <Checkbox\n                checked={row.getIsSelected()}\n                onCheckedChange={(value) => row.toggleSelected(!!value)}\n                aria-label=\"Select row\"\n            />\n        ),\n        enableSorting: false,\n        enableHiding: false,\n    },\n    {\n        accessorKey: \"id\",\n        header: ({ column }) => {\n            return (\n                <Button\n                    variant=\"ghost\"\n                    onClick={() =>\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\n                    }\n                >\n                    ID\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                </Button>\n            );\n        },\n        cell: (info) => info.row.index + 1,\n    },\n    {\n        accessorKey: \"name\",\n        header: ({ column }) => {\n            return (\n                <Button\n                    variant=\"ghost\"\n                    onClick={() =>\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\n                    }\n                >\n                    Source Name\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                </Button>\n            );\n        },\n    },\n    {\n        accessorKey: \"value\",\n        header: \"Value\",\n    },\n    {\n        accessorKey: \"clicks\",\n        header: ({ column }) => {\n            return (\n                <Button\n                    variant=\"ghost\"\n                    onClick={() =>\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\n                    }\n                >\n                    Clicks\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                </Button>\n            );\n        },\n    },\n    {\n        accessorKey: \"conversions\",\n        header: ({ column }) => {\n            return (\n                <Button\n                    variant=\"ghost\"\n                    onClick={() =>\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\n                    }\n                >\n                    Conversions\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                </Button>\n            );\n        },\n    },\n    {\n        accessorKey: \"cvr\",\n        header: ({ column }) => {\n            return (\n                <Button\n                    variant=\"ghost\"\n                    onClick={() =>\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\n                    }\n                >\n                    CVR\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                </Button>\n            );\n        },\n    },\n    {\n        accessorKey: \"created_at\",\n        header: \"Create At\",\n        cell: ({ row }) => {\n            const date = new Date(row.getValue(\"created_at\"));\n            const formated = date.toLocaleDateString();\n            return <div className=\"font-medium\">{formated}</div>;\n        },\n    },\n    {\n        accessorKey: \"updated_at\",\n        header: \"Updated At\",\n        cell: ({ row }) => {\n            const date = new Date(row.getValue(\"updated_at\"));\n            const formated = date.toLocaleDateString();\n            return <div className=\"font-medium\">{formated}</div>;\n        },\n    },\n    {\n        accessorKey: \"status\",\n        header: ({ column }) => {\n            return (\n                <Button\n                    variant=\"ghost\"\n                    onClick={() =>\n                        column.toggleSorting(column.getIsSorted() === \"asc\")\n                    }\n                >\n                    Status\n                    <ArrowUpDown className=\"ml-2 h-4 w-4\" />\n                </Button>\n            );\n        },\n        cell: ({ row }) => {\n            const status = String(row.getValue(\"status\"));\n            return (\n                <>\n                    {status === \"active\" ? (\n                        <div className=\"text-green-500\">Active</div>\n                    ) : (\n                        <div className=\"text-red-500\">Inactive</div>\n                    )}\n                </>\n            );\n        },\n    },\n    {\n        header: \"Actions\",\n        id: \"actions\",\n        cell: ({ row }) => {\n            const rowCurrent = row.original;\n            return (\n                <>\n                    <Dropdown rowCurrent={rowCurrent} />\n                </>\n            );\n        },\n    },\n];\n"],"names":["Columns","table","jsx","Checkbox","value","row","column","jsxs","Button","ArrowUpDown","info","formated","status","Fragment","rowCurrent","Dropdown"],"mappings":"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"}