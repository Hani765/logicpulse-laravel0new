{"version":3,"file":"multi-select-DPI-qEqD.js","sources":["../../../resources/js/components/ui/multi-select.tsx"],"sourcesContent":["\"use client\";\n\nimport * as React from \"react\";\nimport { X } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n    Command,\n    CommandGroup,\n    CommandItem,\n    CommandList,\n} from \"@/components/ui/command\";\nimport { Command as CommandPrimitive } from \"cmdk\";\nimport { Checkbox } from \"./checkbox\";\nimport { Input } from \"./input\";\nimport { Label } from \"./label\";\n\ntype Item = {\n    unique_id: string;\n    name: string;\n};\n\ninterface MultiSelectProps {\n    items: Item[];\n    selectedItems: string; // Comma-separated values\n    label: string; // Comma-separated values\n    descriptoin?: string; // Comma-separated values\n    onSelect: (unique_id: string) => void; // Handler to update selected items\n}\n\nexport function MultiSelect({\n    items,\n    selectedItems,\n    onSelect,\n    descriptoin,\n    label,\n}: MultiSelectProps) {\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    const [open, setOpen] = React.useState(false);\n    const [inputValue, setInputValue] = React.useState(\"\");\n    const [selectAll, setSelectAll] = React.useState(false);\n\n    const handleUnselect = React.useCallback(\n        (item: Item) => {\n            const updatedSelection = selectedItems\n                .split(\",\")\n                .filter((unique_id) => unique_id !== item.unique_id)\n                .join(\",\");\n            onSelect(updatedSelection);\n        },\n        [selectedItems, onSelect],\n    );\n\n    const handleSelectAll = React.useCallback(() => {\n        if (selectAll) {\n            onSelect(\"\");\n        } else {\n            const allValues = items.map((item) => item.unique_id).join(\",\");\n            onSelect(allValues);\n        }\n        setSelectAll(!selectAll);\n    }, [selectAll, items, onSelect]);\n\n    const handleKeyDown = React.useCallback(\n        (e: React.KeyboardEvent<HTMLDivElement>) => {\n            const input = inputRef.current;\n            if (input) {\n                if (e.key === \"Delete\" || e.key === \"Backspace\") {\n                    if (input.value === \"\") {\n                        const updatedSelection = selectedItems\n                            .split(\",\")\n                            .slice(0, -1)\n                            .join(\",\");\n                        onSelect(updatedSelection);\n                    }\n                }\n                if (e.key === \"Escape\") {\n                    input.blur();\n                }\n            }\n        },\n        [selectedItems, onSelect],\n    );\n\n    const selectedArray = selectedItems.split(\",\");\n    const selectables = items\n        .filter((item) => !selectedArray.includes(item.unique_id))\n        .filter(\n            (item) =>\n                item.name.toLowerCase().includes(inputValue.toLowerCase()) ||\n                item.unique_id.toLowerCase().includes(inputValue.toLowerCase()),\n        );\n\n    React.useEffect(() => {\n        const allValues = items.map((item) => item.unique_id);\n        setSelectAll(allValues.length === selectedArray.length);\n    }, [items, selectedArray]);\n    const handleSelect = React.useCallback(\n        (item: Item) => {\n            const currentSelection = selectedItems.split(\",\").filter(Boolean); // Ensure no empty strings\n            const updatedSelection = [\n                ...new Set([...currentSelection, item.unique_id]),\n            ].join(\",\"); // Remove duplicates\n            onSelect(updatedSelection);\n        },\n        [selectedItems, onSelect],\n    );\n\n    return (\n        <>\n            <Command\n                onKeyDown={handleKeyDown}\n                className=\"overflow-visible bg-transparent\"\n            >\n                <div className=\"mt-1\">\n                    <div className=\"items-center justify-between flex\">\n                        <Label className=\"\">{label}</Label>\n                        <div className=\"flex items-center space-x-2\">\n                            <span>Select All</span>\n                            <Checkbox\n                                checked={selectAll}\n                                onCheckedChange={handleSelectAll}\n                                className=\"form-checkbox\"\n                            />\n                        </div>\n                    </div>\n                    <div className=\"flex gap-2 flex-wrap overflow-y-auto max-h-[200px] group rounded-md border border-input px-3 py-2 text-sm ring-offset-background focus-within:ring-1 focus-within:ring-ring focus-within:ring-offset-1\">\n                        {selectedArray.map((unique_id) => {\n                            const item = items.find(\n                                (f) => f.unique_id === unique_id,\n                            );\n                            return item ? (\n                                <Badge key={item.unique_id} variant=\"secondary\">\n                                    {item.name}\n                                    <button\n                                        className=\"ml-1 rounded-full outline-none ring-offset-background focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                                        onKeyDown={(e) => {\n                                            if (e.key === \"Enter\") {\n                                                handleUnselect(item);\n                                            }\n                                        }}\n                                        onMouseDown={(e) => {\n                                            e.preventDefault();\n                                            e.stopPropagation();\n                                        }}\n                                        onClick={() => handleUnselect(item)}\n                                    >\n                                        <X className=\"h-3 w-3 text-muted-foreground hover:text-foreground\" />\n                                    </button>\n                                </Badge>\n                            ) : null;\n                        })}\n                        <CommandPrimitive.Input\n                            ref={inputRef}\n                            value={inputValue}\n                            onValueChange={setInputValue}\n                            onBlur={() => setOpen(false)}\n                            onFocus={() => setOpen(true)}\n                            placeholder={`${label}...`}\n                            className=\"ml-2 flex-1 bg-transparent outline-none placeholder:text-muted-foreground\"\n                        />\n                    </div>\n                </div>\n                <div className=\"relative mt-2\">\n                    <CommandList>\n                        {open && selectables.length > 0 ? (\n                            <div className=\"absolute top-0 z-10 w-full rounded-md border bg-popover text-popover-foreground shadow-md outline-none animate-in\">\n                                <CommandGroup className=\"h-full overflow-auto\">\n                                    {selectables.map((item) => (\n                                        <CommandItem\n                                            key={item.unique_id}\n                                            onMouseDown={(e) => {\n                                                e.preventDefault();\n                                                e.stopPropagation();\n                                            }}\n                                            onSelect={() => {\n                                                handleSelect(item);\n                                            }}\n                                            className=\"cursor-pointer\"\n                                        >\n                                            {item.name}\n                                        </CommandItem>\n                                    ))}\n                                </CommandGroup>\n                            </div>\n                        ) : null}\n                    </CommandList>\n                </div>\n                {descriptoin && (\n                    <p className=\"text-sm text-gray-500\">{descriptoin}</p>\n                )}\n            </Command>{\" \"}\n        </>\n    );\n}\n"],"names":["MultiSelect","items","selectedItems","onSelect","descriptoin","label","inputRef","React.useRef","open","setOpen","React.useState","inputValue","setInputValue","selectAll","setSelectAll","handleUnselect","React.useCallback","item","updatedSelection","unique_id","handleSelectAll","allValues","handleKeyDown","input","selectedArray","selectables","React.useEffect","handleSelect","currentSelection","jsxs","Fragment","Command","jsx","Label","Checkbox","f","Badge","e","X","CommandPrimitive","CommandList","CommandGroup","CommandItem"],"mappings":"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"}