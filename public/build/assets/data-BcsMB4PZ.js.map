{"version":3,"file":"data-BcsMB4PZ.js","sources":["../../../resources/js/hooks/FetchContext.tsx","../../../resources/js/hooks/useFetchContext.ts","../../../resources/js/Pages/Offers/data.tsx"],"sourcesContent":["// FetchContext.tsx\r\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { echoInstance } from \"@/bootstrap\";\r\nimport { playNotificationSound } from \"./play-audio\";\r\nimport { toast } from \"sonner\";\r\nimport { usePage } from \"@inertiajs/react\";\r\nimport { PageProps } from \"@/types\";\r\n\r\ntype FetchResult<T> = {\r\n    data: T | null;\r\n    error: Error | null;\r\n    isLoading: boolean;\r\n};\r\n\r\ntype FetchContextType<T> = FetchResult<T>;\r\nexport const FetchContext = createContext<FetchContextType<any> | undefined>(\r\n    undefined,\r\n); // Add export here\r\n\r\nexport const FetchProvider: React.FC<{\r\n    url: string;\r\n    children: React.ReactNode;\r\n}> = ({ url, children }) => {\r\n    const [data, setData] = useState<any | null>(null);\r\n    const [error, setError] = useState<Error | null>(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const page = usePage<PageProps>();\r\n    const userId = page.props.auth.user.unique_id;\r\n    const userRole = page.props.auth.user.role;\r\n\r\n    const fetchData = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            const response = await fetch(url);\r\n            if (!response.ok)\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            const json = await response.json();\r\n            setData(json);\r\n        } catch (err) {\r\n            setError(err as Error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Fetch data on mount\r\n        fetchData();\r\n\r\n        // Subscribe to the echo instance events\r\n        const channels: any[] = [\r\n            echoInstance.private(`clickConversion.${userId}`),\r\n            echoInstance.private(`clickConversion.role.${userRole}`),\r\n        ];\r\n\r\n        channels.forEach((channel) =>\r\n            channel.listen(\".clickConversion.sent\", (e: any) => {\r\n                if (e.clickConversion.message === \"conversion\") {\r\n                    playNotificationSound();\r\n                    toast.message(\"New message\", {\r\n                        description: \"A new conversion has been received\",\r\n                    });\r\n                    fetchData(); // Refetch data on real-time event\r\n                }\r\n            }),\r\n        );\r\n\r\n        // Cleanup subscriptions on unmount\r\n        return () =>\r\n            channels.forEach((channel) =>\r\n                channel.stopListening(\".clickConversion.sent\"),\r\n            );\r\n    }, [userId, userRole, url]);\r\n\r\n    return (\r\n        <FetchContext.Provider value={{ data, error, isLoading }}>\r\n            {children}\r\n        </FetchContext.Provider>\r\n    );\r\n};\r\n","// useFetchContext.ts\r\nimport { useContext } from \"react\";\r\nimport { FetchContext } from \"./FetchContext\";\r\nimport { FetchResult } from \"@/types\";\r\n\r\nexport const useFetchContext = <T>() => {\r\n    const context = useContext(FetchContext) as FetchResult<T>;\r\n    if (!context) {\r\n        throw new Error(\"useFetchContext must be used within a FetchProvider\");\r\n    }\r\n    return context;\r\n};\r\n","// YourComponent.tsx\r\nimport { PageChart } from \"@/components/charts/page-chart\";\r\nimport { DataTable } from \"@/components/table\";\r\nimport { DataTableSkeleton } from \"@/components/tableComponents/tableSkeleton\";\r\nimport { useFetchContext } from \"@/hooks/useFetchContext\";\r\nimport { OfferType } from \"@/types\";\r\nimport { LucideServerCrash } from \"lucide-react\";\r\nimport React from \"react\";\r\nimport { Columns } from \"./components/columns\";\r\nimport Create from \"./components/create/create\";\r\ninterface dataType {\r\n    data: OfferType[];\r\n    pagination: any;\r\n    chart_data: any[];\r\n}\r\nexport const DataPage = ({\r\n    url,\r\n    setUrl,\r\n    role,\r\n}: {\r\n    url: string;\r\n    setUrl: any;\r\n    role: string;\r\n}) => {\r\n    const { data, error, isLoading } = useFetchContext<dataType>();\r\n\r\n    if (isLoading) return <div>Loading...</div>;\r\n    if (error) return <div>Error: {error.message}</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Fetched Data</h1>\r\n            {error ? (\r\n                <div className=\"min-h-72 mt-6 bg-white flex border flex-col border-gray-200 dark:border-gray-700 dark:bg-gray-900 w-full shadow-sm justify-center items-center px-2 rounded py-4 text-gray-100 dark:text-gray-600\">\r\n                    <LucideServerCrash size={44} />\r\n                    <div>\r\n                        Something went wrong please try to refresh the page.\r\n                    </div>\r\n                </div>\r\n            ) : !data ? (\r\n                <DataTableSkeleton\r\n                    rowCount={8}\r\n                    columnCount={8}\r\n                    showViewOptions={false}\r\n                />\r\n            ) : (\r\n                <>\r\n                    <PageChart data={data?.chart_data} isLoading={isLoading} />\r\n                    <DataTable\r\n                        isLoading={isLoading}\r\n                        data={data.data}\r\n                        pagination={data.pagination}\r\n                        endPoint={url}\r\n                        columns={Columns(role)}\r\n                        onUrlChange={(url: string) => setUrl(url)}\r\n                        isPagination\r\n                        Create={\r\n                            role === \"admin\" || role === \"administrator\"\r\n                                ? Create\r\n                                : undefined\r\n                        }\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n"],"names":["FetchContext","createContext","FetchProvider","url","children","data","setData","useState","error","setError","isLoading","setIsLoading","page","usePage","userId","userRole","fetchData","response","json","err","useEffect","channels","echoInstance","channel","e","playNotificationSound","toast","jsx","useFetchContext","context","useContext","DataPage","setUrl","role","jsxs","LucideServerCrash","Fragment","PageChart","DataTable","Columns","Create","DataTableSkeleton"],"mappings":"gVAeO,MAAMA,EAAeC,EAAA,cACxB,MACJ,EAEaC,EAGR,CAAC,CAAE,IAAAC,EAAK,SAAAC,KAAe,CACxB,KAAM,CAACC,EAAMC,CAAO,EAAIC,EAAAA,SAAqB,IAAI,EAC3C,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAuB,IAAI,EAC/C,CAACG,EAAWC,CAAY,EAAIJ,EAAAA,SAAS,EAAI,EAEzCK,EAAOC,EAAmB,EAC1BC,EAASF,EAAK,MAAM,KAAK,KAAK,UAC9BG,EAAWH,EAAK,MAAM,KAAK,KAAK,KAEhCI,EAAY,SAAY,CAC1BL,EAAa,EAAI,EACb,GAAA,CACM,MAAAM,EAAW,MAAM,MAAMd,CAAG,EAChC,GAAI,CAACc,EAAS,GACV,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EACtD,MAAAC,EAAO,MAAMD,EAAS,KAAK,EACjCX,EAAQY,CAAI,QACPC,EAAK,CACVV,EAASU,CAAY,CAAA,QACvB,CACER,EAAa,EAAK,CAAA,CAE1B,EAEAS,OAAAA,EAAAA,UAAU,IAAM,CAEFJ,EAAA,EAGV,MAAMK,EAAkB,CACpBC,EAAa,QAAQ,mBAAmBR,CAAM,EAAE,EAChDQ,EAAa,QAAQ,wBAAwBP,CAAQ,EAAE,CAC3D,EAES,OAAAM,EAAA,QAASE,GACdA,EAAQ,OAAO,wBAA0BC,GAAW,CAC5CA,EAAE,gBAAgB,UAAY,eACRC,EAAA,EACtBC,EAAM,QAAQ,cAAe,CACzB,YAAa,oCAAA,CAChB,EACSV,EAAA,EAEjB,CAAA,CACL,EAGO,IACHK,EAAS,QAASE,GACdA,EAAQ,cAAc,uBAAuB,CACjD,CACL,EAAA,CAACT,EAAQC,EAAUZ,CAAG,CAAC,EAGtBwB,MAAC3B,EAAa,SAAb,CAAsB,MAAO,CAAE,KAAAK,EAAM,MAAAG,EAAO,UAAAE,GACxC,SAAAN,EACL,CAER,EC3EawB,EAAkB,IAAS,CAC9B,MAAAC,EAAUC,aAAW9B,CAAY,EACvC,GAAI,CAAC6B,EACK,MAAA,IAAI,MAAM,qDAAqD,EAElE,OAAAA,CACX,ECIaE,EAAW,CAAC,CACrB,IAAA5B,EACA,OAAA6B,EACA,KAAAC,CACJ,IAIM,CACF,KAAM,CAAE,KAAA5B,EAAM,MAAAG,EAAO,UAAAE,CAAA,EAAckB,EAA0B,EAE7D,OAAIlB,EAAmBiB,EAAA,IAAA,MAAA,CAAI,SAAU,aAAA,EACjCnB,EAAc0B,EAAAA,KAAC,MAAI,CAAA,SAAA,CAAA,UAAQ1B,EAAM,OAAA,EAAQ,SAGxC,MACG,CAAA,SAAA,CAAAmB,EAAAA,IAAC,MAAG,SAAY,cAAA,CAAA,EACfnB,EACG0B,EAAA,KAAC,MAAI,CAAA,UAAU,oMACX,SAAA,CAACP,EAAAA,IAAAQ,EAAA,CAAkB,KAAM,EAAI,CAAA,EAC7BR,EAAAA,IAAC,OAAI,SAEL,sDAAA,CAAA,CAAA,EACJ,EACCtB,EAQG6B,EAAA,KAAAE,WAAA,CAAA,SAAA,CAAAT,EAAA,IAACU,EAAU,CAAA,KAAMhC,GAAA,YAAAA,EAAM,WAAY,UAAAK,EAAsB,EACzDiB,EAAA,IAACW,EAAA,CACG,UAAA5B,EACA,KAAML,EAAK,KACX,WAAYA,EAAK,WACjB,SAAUF,EACV,QAASoC,EAAQN,CAAI,EACrB,YAAc9B,GAAgB6B,EAAO7B,CAAG,EACxC,aAAY,GACZ,OACI8B,IAAS,SAAWA,IAAS,gBACvBO,EACA,MAAA,CAAA,CAEd,CACJ,CAAA,EAtBAb,EAAA,IAACc,EAAA,CACG,SAAU,EACV,YAAa,EACb,gBAAiB,EAAA,CAAA,CAmBrB,EAER,CAER"}