{"version":3,"file":"UpdateForm-BEgb_hhU.js","sources":["../../../resources/js/Pages/Offers/components/update/UpdateForm.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n    Select as ShadcnSelect,\r\n    SelectContent,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { ReloadIcon } from \"@radix-ui/react-icons\";\r\nimport { CountryType, DomainsType, NetworkType, UserType } from \"@/types\";\r\nimport { useForm } from \"@inertiajs/react\";\r\nimport SearchSelect from \"@/components/ui/search-select\";\r\nimport InputError from \"@/components/InputError\";\r\nimport { LabelInputContainer } from \"@/components/ui/LabelInputContainer\";\r\nimport { MultiSelect } from \"@/components/ui/multi-select\";\r\nimport { toast } from \"sonner\";\r\ntype DeviceType = \"all\" | \"windows\" | \"mobiles\" | \"linux\" | \"android\" | \"iOs\";\r\n\r\ninterface TagInputProps {\r\n    domains: DomainsType[];\r\n    users: UserType[];\r\n    networks: NetworkType[];\r\n    countries: CountryType[];\r\n    categories: CountryType[];\r\n    offer: any;\r\n    doneFunction: any;\r\n}\r\n\r\ninterface InputField {\r\n    url: string;\r\n    deviceType: DeviceType | \"\";\r\n}\r\n\r\ninterface Option {\r\n    value: string;\r\n    label: string;\r\n}\r\n\r\nconst UpdateForm: React.FC<TagInputProps> = ({\r\n    domains,\r\n    users,\r\n    networks,\r\n    countries,\r\n    categories,\r\n    offer,\r\n    doneFunction,\r\n}) => {\r\n    const deviceTypes: DeviceType[] = [\r\n        \"all\",\r\n        \"windows\",\r\n        \"mobiles\",\r\n        \"linux\",\r\n        \"android\",\r\n        \"iOs\",\r\n    ];\r\n    const [urlErrors, setUrlErrors] = useState<{ [key: number]: string }>({});\r\n    const { put, processing, data, setData, errors } = useForm({\r\n        offer_name: offer.offer?.offer_name,\r\n        image: null as File | null,\r\n        age: offer.offer?.age,\r\n        rate: offer.offer?.rate,\r\n        encryption: offer.offer?.encryption,\r\n        network_id: offer.offer?.network_id,\r\n        domain_id: offer.offer?.domain_id,\r\n        category_id: offer.offer?.category_id,\r\n        proxy: offer.offer?.proxy,\r\n        details: offer.offer?.details,\r\n        countries: offer.offer?.countries,\r\n        status: offer.offer?.status,\r\n        urls: offer.offer?.urls,\r\n        users_ids: offer.users,\r\n    });\r\n    const handleAddInput = () => {\r\n        setData((prevState) => ({\r\n            ...prevState,\r\n            urls: [...prevState.urls, { url: \"\", deviceType: \"\" }],\r\n        }));\r\n    };\r\n    const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const file = event.target.files?.[0];\r\n        if (file) {\r\n            setData((prevState) => ({ ...prevState, image: file }));\r\n        }\r\n    };\r\n    const handleRemoveInput = (index: number) => {\r\n        if (data.urls.length > 1) {\r\n            setData((prevState) => {\r\n                const newUrls = prevState.urls.filter(\r\n                    (_: any, i: any) => i !== index\r\n                );\r\n                return { ...prevState, urls: newUrls };\r\n            });\r\n            setUrlErrors((prevErrors) => {\r\n                const newErrors = { ...prevErrors };\r\n                delete newErrors[index];\r\n                return newErrors;\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (\r\n        index: number,\r\n        field: keyof InputField,\r\n        value: string\r\n    ) => {\r\n        setData((prevState) => {\r\n            const newUrls = prevState.urls.map((input: any, i: any) =>\r\n                i === index ? { ...input, [field]: value } : input\r\n            );\r\n            return { ...prevState, urls: newUrls };\r\n        });\r\n        if (field === \"url\") {\r\n            validateUrl(index, value);\r\n        }\r\n    };\r\n\r\n    const validateUrl = (index: number, url: string) => {\r\n        try {\r\n            new URL(url);\r\n            setUrlErrors((prevErrors) => {\r\n                const newErrors = { ...prevErrors };\r\n                delete newErrors[index];\r\n                return newErrors;\r\n            });\r\n        } catch {\r\n            setUrlErrors((prevErrors) => ({\r\n                ...prevErrors,\r\n                [index]: \"Invalid URL\",\r\n            }));\r\n        }\r\n    };\r\n\r\n    const selectedDeviceTypes = data.urls.map((input: any) => input.deviceType);\r\n    const submitOffer = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        put(`/dashboard/offers/${offer.offer.unique_id}`, {\r\n            onSuccess: () => {\r\n                toast.success(\"Offer has been updated!\");\r\n                doneFunction();\r\n            },\r\n            onError: (errors) => {\r\n                toast.error(errors.offer_name);\r\n            },\r\n        });\r\n    };\r\n    return (\r\n        <form onSubmit={submitOffer} className=\"px-4 pb-4\">\r\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\r\n                        <LabelInputContainer\r\n                            type=\"text\"\r\n                            value={data.offer_name}\r\n                            onChange={(e) =>\r\n                                setData({\r\n                                    ...data,\r\n                                    offer_name: e.target.value,\r\n                                })\r\n                            }\r\n                            required\r\n                            errorMessage={errors.offer_name}\r\n                            description=\"Enter a unique and descriptive name for the offer.\"\r\n                            label=\"Offer Name\"\r\n                            helperText=\"Offer Name\"\r\n                            id=\"offer-name\"\r\n                        />\r\n                        <LabelInputContainer\r\n                            type=\"file\"\r\n                            onChange={handleImageChange}\r\n                            errorMessage={errors.image}\r\n                            description=\"Select an image for offer to show as an OG image.\"\r\n                            label=\"Selete Image\"\r\n                            id=\"offer-image\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-2\">\r\n                        <LabelInputContainer\r\n                            type=\"number\"\r\n                            value={data.age}\r\n                            onChange={(e) =>\r\n                                setData({\r\n                                    ...data,\r\n                                    age: e.target.value,\r\n                                })\r\n                            }\r\n                            required\r\n                            helperText=\"18\"\r\n                            errorMessage={errors.age}\r\n                            description=\"Specify the minimum age required to avail this offer.\"\r\n                            label=\"Age:\"\r\n                            id=\"age\"\r\n                        />\r\n                        <LabelInputContainer\r\n                            type=\"number\"\r\n                            value={data.rate}\r\n                            onChange={(e) =>\r\n                                setData({\r\n                                    ...data,\r\n                                    rate: e.target.value,\r\n                                })\r\n                            }\r\n                            required\r\n                            helperText=\"150\"\r\n                            errorMessage={errors.rate}\r\n                            description=\"Enter the rate for this offer in your local currency.\"\r\n                            label=\"Rate:\"\r\n                            id=\"rate\"\r\n                        />\r\n                        <LabelInputContainer\r\n                            type=\"number\"\r\n                            value={data.encryption}\r\n                            onChange={(e) =>\r\n                                setData({\r\n                                    ...data,\r\n                                    encryption: e.target.value,\r\n                                })\r\n                            }\r\n                            helperText=\"****\"\r\n                            errorMessage={errors.encryption}\r\n                            description=\"Specify the encryption level or code for the offer, if applicable.\"\r\n                            label=\"Encryption:\"\r\n                            id=\"encryption\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"w-full\">\r\n                        <SearchSelect\r\n                            label=\"Select Network\"\r\n                            items={networks}\r\n                            onSelect={(unique_id: string) =>\r\n                                setData({ ...data, network_id: unique_id })\r\n                            }\r\n                            selected_value={data.network_id}\r\n                            description=\"Choose the network associated with this offer.\"\r\n                            errorMessage={errors.network_id}\r\n                        />\r\n                    </div>\r\n                    <div className=\"w-full grid grid-cols-3 gap-4\">\r\n                        <div className=\"col-span-2\">\r\n                            <SearchSelect\r\n                                label=\"Select Domain\"\r\n                                items={domains}\r\n                                onSelect={(unique_id: string) =>\r\n                                    setData({ ...data, domain_id: unique_id })\r\n                                }\r\n                                selected_value={data.domain_id}\r\n                                description=\"Select the domain where this offer will be available.\"\r\n                                errorMessage={errors.domain_id}\r\n                            />\r\n                        </div>\r\n                        <div className=\"w-full\">\r\n                            <Label>Proxy check</Label>\r\n                            <ShadcnSelect\r\n                                required\r\n                                value={data.proxy}\r\n                                onValueChange={(proxy) =>\r\n                                    setData({ ...data, proxy })\r\n                                }\r\n                            >\r\n                                <SelectTrigger className=\"\">\r\n                                    <SelectValue placeholder=\"proxy\" />\r\n                                </SelectTrigger>\r\n                                <SelectContent side=\"top\">\r\n                                    {[\"yes\", \"no\"].map((statusOption) => (\r\n                                        <SelectItem\r\n                                            key={statusOption}\r\n                                            value={statusOption}\r\n                                        >\r\n                                            {statusOption}\r\n                                        </SelectItem>\r\n                                    ))}\r\n                                </SelectContent>\r\n                            </ShadcnSelect>\r\n                            <InputError message={errors.proxy} />\r\n                        </div>\r\n                    </div>\r\n                    <SearchSelect\r\n                        label=\"Select Category\"\r\n                        items={categories}\r\n                        onSelect={(unique_id: string) =>\r\n                            setData({ ...data, category_id: unique_id })\r\n                        }\r\n                        selected_value={data.category_id}\r\n                        description=\"Pick a category that best describes the offer.\"\r\n                        errorMessage={errors.category_id}\r\n                    />\r\n                    <div className=\"w-full\">\r\n                        <Label htmlFor=\"message\">About:</Label>\r\n                        <Textarea\r\n                            name=\"message\"\r\n                            placeholder=\"Something about the offer...\"\r\n                            id=\"message\"\r\n                            onChange={(e) =>\r\n                                setData({\r\n                                    ...data,\r\n                                    details: e.target.value,\r\n                                })\r\n                            }\r\n                            required\r\n                            defaultValue={data.details}\r\n                        />\r\n                        <p className=\"text-sm text-gray-500\">\r\n                            Provide a detailed description of the offer.\r\n                        </p>\r\n                        <InputError message={errors.details} />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"w-full border-t sm:border-0\">\r\n                    {data.urls.map((input: any, index: any) => (\r\n                        <div key={index} className=\"w-full flex gap-2\">\r\n                            <div className=\"w-full pt-1\">\r\n                                <Label>Offer Url</Label>\r\n                                <Input\r\n                                    type=\"url\"\r\n                                    required\r\n                                    placeholder=\"https://www.example-offer.com\"\r\n                                    className={`py-4 ${\r\n                                        urlErrors[index] ? \"border-red-500\" : \"\"\r\n                                    }`}\r\n                                    value={input.url}\r\n                                    onChange={(e) =>\r\n                                        handleInputChange(\r\n                                            index,\r\n                                            \"url\",\r\n                                            e.target.value\r\n                                        )\r\n                                    }\r\n                                />\r\n                                {urlErrors[index] && (\r\n                                    <p className=\"text-red-500 text-sm\">\r\n                                        {urlErrors[index]}\r\n                                    </p>\r\n                                )}\r\n                            </div>\r\n                            <div className=\"w-[300px]\">\r\n                                <Label>Device Type</Label>\r\n                                <ShadcnSelect\r\n                                    required\r\n                                    value={input.deviceType}\r\n                                    onValueChange={(value: DeviceType) =>\r\n                                        handleInputChange(\r\n                                            index,\r\n                                            \"deviceType\",\r\n                                            value\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    <SelectTrigger className=\"h-10 my-1\">\r\n                                        <SelectValue placeholder=\"Device Type\" />\r\n                                    </SelectTrigger>\r\n                                    <SelectContent side=\"top\">\r\n                                        {deviceTypes\r\n                                            .filter(\r\n                                                (type) =>\r\n                                                    !selectedDeviceTypes.includes(\r\n                                                        type\r\n                                                    ) ||\r\n                                                    type === input.deviceType\r\n                                            )\r\n                                            .map((statusOption) => (\r\n                                                <SelectItem\r\n                                                    key={statusOption}\r\n                                                    value={statusOption}\r\n                                                >\r\n                                                    {statusOption}\r\n                                                </SelectItem>\r\n                                            ))}\r\n                                    </SelectContent>\r\n                                </ShadcnSelect>\r\n                            </div>\r\n                            <Button\r\n                                type=\"button\"\r\n                                onClick={() => handleRemoveInput(index)}\r\n                                className=\"text-red-500 bg-transparent mt-6 hover:bg-transparent hover:text-red-600\"\r\n                            >\r\n                                <MdDelete />\r\n                            </Button>\r\n                        </div>\r\n                    ))}\r\n                    {data.urls.length < deviceTypes.length && (\r\n                        <Button\r\n                            type=\"button\"\r\n                            onClick={handleAddInput}\r\n                            variant=\"ringHover\"\r\n                            className=\"mt-2\"\r\n                        >\r\n                            Add URL\r\n                        </Button>\r\n                    )}\r\n                    <div className=\"mt-2 space-y-2\">\r\n                        <MultiSelect\r\n                            items={users}\r\n                            selectedItems={data.users_ids}\r\n                            onSelect={(unique_ids) =>\r\n                                setData({ ...data, users_ids: unique_ids })\r\n                            }\r\n                            label=\"Select Users\"\r\n                        />\r\n                        <MultiSelect\r\n                            items={countries}\r\n                            selectedItems={data.countries}\r\n                            onSelect={(unique_ids) =>\r\n                                setData({ ...data, countries: unique_ids })\r\n                            }\r\n                            label=\"Select countries\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <hr className=\"my-2\" />\r\n            <div className=\"w-full items-center justify-end flex gap-2\">\r\n                <div className=\"w-full lg:max-w-36\">\r\n                    <ShadcnSelect\r\n                        required\r\n                        value={data.status}\r\n                        onValueChange={(status) => setData({ ...data, status })}\r\n                    >\r\n                        <SelectTrigger className=\"h-10 my-1\">\r\n                            <SelectValue placeholder=\"Select status\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent side=\"top\">\r\n                            {[\"active\", \"inactive\", \"paused\"].map(\r\n                                (statusOption) => (\r\n                                    <SelectItem\r\n                                        key={statusOption}\r\n                                        value={statusOption}\r\n                                    >\r\n                                        {statusOption}\r\n                                    </SelectItem>\r\n                                )\r\n                            )}\r\n                        </SelectContent>\r\n                    </ShadcnSelect>\r\n                    <InputError message={errors.status} />\r\n                </div>\r\n                <Button\r\n                    type=\"submit\"\r\n                    disabled={processing}\r\n                    variant=\"gooeyRight\"\r\n                >\r\n                    {processing ? (\r\n                        <React.Fragment>\r\n                            <ReloadIcon className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                            Processing...\r\n                        </React.Fragment>\r\n                    ) : (\r\n                        \"Submit\"\r\n                    )}\r\n                </Button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default UpdateForm;\r\n"],"names":["UpdateForm","domains","users","networks","countries","categories","offer","doneFunction","deviceTypes","urlErrors","setUrlErrors","useState","put","processing","data","setData","errors","useForm","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","handleAddInput","prevState","handleImageChange","event","file","handleRemoveInput","index","newUrls","_","i","prevErrors","newErrors","handleInputChange","field","value","input","validateUrl","url","selectedDeviceTypes","submitOffer","toast","jsxs","jsx","LabelInputContainer","e","SearchSelect","unique_id","Label","ShadcnSelect","proxy","SelectTrigger","SelectValue","SelectContent","statusOption","SelectItem","InputError","Textarea","Input","type","Button","MdDelete","MultiSelect","unique_ids","status","React","ReloadIcon","UpdateForm$1"],"mappings":"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"}