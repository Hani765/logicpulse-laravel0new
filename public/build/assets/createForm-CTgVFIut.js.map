{"version":3,"file":"createForm-CTgVFIut.js","sources":["../../../resources/js/Pages/Users/components/create/createForm.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { toast } from \"sonner\";\r\nimport {\r\n    Select as ShadcnSelect,\r\n    SelectContent,\r\n    SelectItem,\r\n    SelectTrigger,\r\n    SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { ReloadIcon } from \"@radix-ui/react-icons\";\r\nimport { DomainsType, OfferType } from \"@/types\";\r\nimport { useForm } from \"@inertiajs/react\";\r\nimport SearchSelect from \"@/components/ui/search-select\";\r\nimport { PasswordInput } from \"@/components/auth/password-input\";\r\nimport { LabelInputContainer } from \"@/components/ui/LabelInputContainer\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport InputError from \"@/components/InputError\";\r\nimport { MultiSelect } from \"@/components/ui/multi-select\";\r\nimport SubmitBtn from \"@/components/ui/SubmitBtn\";\r\ntype RoleType = \"administrator\" | \"admin\" | \"manager\";\r\ninterface TagInputProps {\r\n    domains: DomainsType[];\r\n    role: any;\r\n    offers: OfferType[];\r\n    doneFunction: any;\r\n}\r\nconst CreateForm: React.FC<TagInputProps> = ({\r\n    domains,\r\n    role,\r\n    offers,\r\n    doneFunction,\r\n}) => {\r\n    const { data, setData, post, errors, processing } = useForm({\r\n        username: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        domain_id: \"\",\r\n        rate: \"\",\r\n        phone: \"\",\r\n        skype: \"\",\r\n        details: \"\",\r\n        offer_ids: \"\",\r\n        notification: \"yes\",\r\n        role: \"\",\r\n        isVerified: \"no\",\r\n        status: \"active\",\r\n    });\r\n\r\n    // Filter domains based on search term\r\n\r\n    const getRoleOptions = (role: RoleType): string[] => {\r\n        switch (role) {\r\n            case \"administrator\":\r\n                return [\"admin\", \"manager\", \"user\"];\r\n            case \"admin\":\r\n                return [\"manager\", \"user\"];\r\n            case \"manager\":\r\n                return [\"user\"];\r\n            default:\r\n                return [];\r\n        }\r\n    };\r\n    const roleOptions = getRoleOptions(role);\r\n    const updateUser = async (event: React.FormEvent) => {\r\n        event.preventDefault();\r\n        post(\"/dashboard/users\", {\r\n            onSuccess: () => {\r\n                toast.success(\"User created successfully\");\r\n                doneFunction();\r\n            },\r\n        });\r\n    };\r\n    return (\r\n        <form onSubmit={updateUser}>\r\n            <div className=\"w-full space-y-2\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2\">\r\n                    <div className=\"w-full\">\r\n                        <LabelInputContainer\r\n                            type=\"text\"\r\n                            id=\"username\"\r\n                            value={data.username}\r\n                            onChange={(e) =>\r\n                                setData({\r\n                                    ...data,\r\n                                    username: e.target.value,\r\n                                })\r\n                            }\r\n                            required\r\n                            helperText=\"eg: john doe\"\r\n                            className=\"col-span-2 md:col-span-1\"\r\n                            label=\"Username\"\r\n                            errorMessage={errors.username}\r\n                            autoFocus\r\n                        />\r\n                    </div>\r\n                    <div className=\"w-fu\">\r\n                        <LabelInputContainer\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            value={data.email}\r\n                            onChange={(e) =>\r\n                                setData({\r\n                                    ...data,\r\n                                    email: e.target.value,\r\n                                })\r\n                            }\r\n                            required\r\n                            helperText=\"example@gmail.com\"\r\n                            label=\"Email\"\r\n                            errorMessage={errors.email}\r\n                        />\r\n                    </div>\r\n                    <div className=\"w-full -mt-1.5\">\r\n                        <Label htmlFor=\"password\">Password</Label>\r\n                        <PasswordInput\r\n                            id=\"password\"\r\n                            placeholder=\"********\"\r\n                            value={data.password}\r\n                            onChange={(e) =>\r\n                                setData({\r\n                                    ...data,\r\n                                    password: e.target.value,\r\n                                })\r\n                            }\r\n                            required\r\n                        />\r\n                        <InputError message={errors.password} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-2\">\r\n                    <div className=\"w-full\">\r\n                        <SearchSelect\r\n                            items={domains}\r\n                            selected_value={data.domain_id}\r\n                            onSelect={(unique_id: string) => {\r\n                                setData({ ...data, domain_id: unique_id });\r\n                            }}\r\n                            label=\"Select Domain\"\r\n                            errorMessage={errors.domain_id}\r\n                            description=\"Select a domain that you want to assing to user.\"\r\n                        />\r\n                    </div>\r\n                    <LabelInputContainer\r\n                        type=\"number\"\r\n                        value={data.rate}\r\n                        onChange={(e) =>\r\n                            setData({\r\n                                ...data,\r\n                                rate: e.target.value,\r\n                            })\r\n                        }\r\n                        required\r\n                        helperText=\"150\"\r\n                        label=\"Rate\"\r\n                        id=\"rate\"\r\n                        errorMessage={errors.rate}\r\n                    />\r\n                    <LabelInputContainer\r\n                        type=\"number\"\r\n                        value={data.phone}\r\n                        onChange={(e) =>\r\n                            setData({\r\n                                ...data,\r\n                                phone: e.target.value,\r\n                            })\r\n                        }\r\n                        required\r\n                        helperText=\"+123-456-789\"\r\n                        label=\"Phone\"\r\n                        id=\"phone\"\r\n                        errorMessage={errors.phone}\r\n                    />\r\n                    <LabelInputContainer\r\n                        type=\"number\"\r\n                        value={data.skype}\r\n                        onChange={(e) =>\r\n                            setData({\r\n                                ...data,\r\n                                skype: e.target.value,\r\n                            })\r\n                        }\r\n                        required\r\n                        helperText=\"+123-456-789\"\r\n                        label=\"Skype\"\r\n                        id=\"skype\"\r\n                        errorMessage={errors.skype}\r\n                    />\r\n                </div>\r\n                <div className=\"w-full\">\r\n                    <Label htmlFor=\"message\">About:</Label>\r\n                    <Textarea\r\n                        name=\"message\"\r\n                        placeholder=\"Something about user...\"\r\n                        id=\"message\"\r\n                        onChange={(e) =>\r\n                            setData({\r\n                                ...data,\r\n                                details: e.target.value,\r\n                            })\r\n                        }\r\n                        required\r\n                        value={data.details}\r\n                    />\r\n                    <InputError message={errors.details} />\r\n                </div>\r\n                <MultiSelect\r\n                    items={offers}\r\n                    selectedItems={data.offer_ids}\r\n                    onSelect={(unique_ids: string) =>\r\n                        setData({ ...data, offer_ids: unique_ids })\r\n                    }\r\n                    label=\"Select Offers\"\r\n                    descriptoin=\"Select offers that you want to assign to this user.\"\r\n                />\r\n                <InputError message={errors.offer_ids} />\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n                    <div className=\"w-full \">\r\n                        <Label htmlFor=\"message\">Allow notifications:</Label>\r\n                        <ShadcnSelect\r\n                            required\r\n                            value={data.notification}\r\n                            onValueChange={(notification) =>\r\n                                setData({ ...data, notification })\r\n                            }\r\n                        >\r\n                            <SelectTrigger className=\"h-9 my-1\">\r\n                                <SelectValue placeholder=\"Allow notification\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent side=\"top\">\r\n                                {[\"yes\", \"no\"].map((notifyOption) => (\r\n                                    <SelectItem\r\n                                        key={notifyOption}\r\n                                        value={notifyOption}\r\n                                    >\r\n                                        {notifyOption}\r\n                                    </SelectItem>\r\n                                ))}\r\n                            </SelectContent>\r\n                        </ShadcnSelect>\r\n                        <InputError message={errors.notification} />\r\n                    </div>\r\n                    <div className=\"w-full \">\r\n                        <Label htmlFor=\"message\">Role:</Label>\r\n                        <ShadcnSelect\r\n                            required\r\n                            value={data.role}\r\n                            onValueChange={(role) => setData({ ...data, role })}\r\n                        >\r\n                            <SelectTrigger className=\"h-9 my-1\">\r\n                                <SelectValue placeholder=\"Select role\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent side=\"top\">\r\n                                {roleOptions.map((roleOption) => (\r\n                                    <SelectItem\r\n                                        key={roleOption}\r\n                                        value={roleOption}\r\n                                    >\r\n                                        {roleOption}\r\n                                    </SelectItem>\r\n                                ))}\r\n                            </SelectContent>\r\n                        </ShadcnSelect>\r\n                        <InputError message={errors.role} />\r\n                    </div>\r\n                    <div className=\"w-full \">\r\n                        <Label htmlFor=\"message\">Is verified:</Label>\r\n                        <ShadcnSelect\r\n                            required\r\n                            value={data.isVerified}\r\n                            onValueChange={(isVerified) =>\r\n                                setData({ ...data, isVerified })\r\n                            }\r\n                        >\r\n                            <SelectTrigger className=\"h-9 my-1\">\r\n                                <SelectValue placeholder=\"Email verfication\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent side=\"top\">\r\n                                {[\"yes\", \"no\"].map((verifyOption) => (\r\n                                    <SelectItem\r\n                                        key={verifyOption}\r\n                                        value={verifyOption}\r\n                                    >\r\n                                        {verifyOption}\r\n                                    </SelectItem>\r\n                                ))}\r\n                            </SelectContent>\r\n                        </ShadcnSelect>\r\n                        <InputError message={errors.isVerified} />\r\n                    </div>\r\n                    <div className=\"w-full \">\r\n                        <Label htmlFor=\"message\">Status:</Label>\r\n                        <ShadcnSelect\r\n                            required\r\n                            value={data.status}\r\n                            onValueChange={(status) =>\r\n                                setData({ ...data, status })\r\n                            }\r\n                        >\r\n                            <SelectTrigger className=\"h-9 my-1\">\r\n                                <SelectValue placeholder=\"Select status\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent side=\"top\">\r\n                                {[\"active\", \"inactive\", \"banned\"].map(\r\n                                    (statusOption) => (\r\n                                        <SelectItem\r\n                                            key={statusOption}\r\n                                            value={statusOption}\r\n                                        >\r\n                                            {statusOption}\r\n                                        </SelectItem>\r\n                                    )\r\n                                )}\r\n                            </SelectContent>\r\n                        </ShadcnSelect>\r\n                        <InputError message={errors.status} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <hr className=\"my-3\" />\r\n            <div className=\"w-full items-center flex gap-2\">\r\n                <Button\r\n                    variant=\"outline\"\r\n                    className=\" w-full\"\r\n                    type=\"button\"\r\n                    onClick={doneFunction}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n                <SubmitBtn\r\n                    label=\"Create\"\r\n                    className=\"w-full\"\r\n                    processing={processing}\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default CreateForm;\r\n"],"names":["CreateForm","domains","role","offers","doneFunction","data","setData","post","errors","processing","useForm","roleOptions","updateUser","event","toast","jsxs","jsx","LabelInputContainer","e","Label","PasswordInput","InputError","SearchSelect","unique_id","Textarea","MultiSelect","unique_ids","ShadcnSelect","notification","SelectTrigger","SelectValue","SelectContent","notifyOption","SelectItem","roleOption","isVerified","verifyOption","status","statusOption","Button","SubmitBtn","CreateForm$1"],"mappings":"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"}