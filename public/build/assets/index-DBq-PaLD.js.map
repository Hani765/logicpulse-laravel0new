{"version":3,"file":"index-DBq-PaLD.js","sources":["../../../resources/js/Pages/MarketPlace/index.tsx"],"sourcesContent":["import Authenticated from \"@/Layouts/AuthenticatedLayout\";\r\nimport { PageProps } from \"@/types\";\r\nimport { Head } from \"@inertiajs/react\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport Cat from \"./partials/cat\";\r\nimport OffersTable from \"./partials/offersTable\";\r\nimport axios from \"axios\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { debounce } from \"lodash\";\r\n\r\nexport default function Index({ auth }: PageProps) {\r\n    const [selectedCat, setSelectedCat] = useState<string>(\"\");\r\n    const [query, setQuery] = useState<string>(\"\");\r\n    const [offers, setOffers] = useState<any[]>([]); // To store fetched offers\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // Fetch offers based on category and query\r\n    const fetchOffers = useCallback(async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const response = await axios.get(\r\n                `/fetch-public-offers?category=${selectedCat}&q=${query}`,\r\n            );\r\n            setOffers(response.data);\r\n        } catch (error) {\r\n            console.error(\"Error fetching offers:\", error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [selectedCat, query]); // Add selectedCat and query to the dependency array\r\n\r\n    // Debounced version of the fetch function\r\n    const debouncedFetch = useCallback(\r\n        debounce(fetchOffers, 500), // 500ms delay\r\n        [fetchOffers], // Correct dependencies\r\n    );\r\n\r\n    useEffect(() => {\r\n        debouncedFetch(); // Trigger debounced fetch on selectedCat or query change\r\n        return () => {\r\n            debouncedFetch.cancel(); // Clean up the debounced function on unmount or change\r\n        };\r\n    }, [selectedCat, query, debouncedFetch]);\r\n\r\n    return (\r\n        <Authenticated user={auth.user}>\r\n            <Head title=\"Market-Place\" />\r\n            <Input\r\n                value={query}\r\n                onChange={(e) => setQuery(e.target.value)}\r\n                type=\"search\"\r\n            />\r\n            <Cat\r\n                selected={selectedCat}\r\n                onSelect={(unique_id: string) => setSelectedCat(unique_id)}\r\n            />\r\n            <OffersTable isLoading={isLoading} data={offers} />\r\n        </Authenticated>\r\n    );\r\n}\r\n"],"names":["Index","auth","selectedCat","setSelectedCat","useState","query","setQuery","offers","setOffers","isLoading","setIsLoading","fetchOffers","useCallback","response","axios","error","debouncedFetch","debounce","useEffect","jsxs","Authenticated","jsx","Head","Input","e","Cat","unique_id","OffersTable"],"mappings":"ijCAUwB,SAAAA,EAAM,CAAE,KAAAC,GAAmB,CAC/C,KAAM,CAACC,EAAaC,CAAc,EAAIC,EAAAA,SAAiB,EAAE,EACnD,CAACC,EAAOC,CAAQ,EAAIF,EAAAA,SAAiB,EAAE,EACvC,CAACG,EAAQC,CAAS,EAAIJ,EAAAA,SAAgB,CAAA,CAAE,EACxC,CAACK,EAAWC,CAAY,EAAIN,EAAAA,SAAS,EAAI,EAGzCO,EAAcC,EAAAA,YAAY,SAAY,CACpC,GAAA,CACAF,EAAa,EAAI,EACX,MAAAG,EAAW,MAAMC,EAAM,IACzB,iCAAiCZ,CAAW,MAAMG,CAAK,EAC3D,EACAG,EAAUK,EAAS,IAAI,QAClBE,EAAO,CACJ,QAAA,MAAM,yBAA0BA,CAAK,CAAA,QAC/C,CACEL,EAAa,EAAK,CAAA,CACtB,EACD,CAACR,EAAaG,CAAK,CAAC,EAGjBW,EAAiBJ,EAAA,YACnBK,EAAA,SAASN,EAAa,GAAG,EACzB,CAACA,CAAW,CAChB,EAEAO,OAAAA,EAAAA,UAAU,KACSF,EAAA,EACR,IAAM,CACTA,EAAe,OAAO,CAC1B,GACD,CAACd,EAAaG,EAAOW,CAAc,CAAC,EAGlCG,EAAAA,KAAAC,EAAA,CAAc,KAAMnB,EAAK,KACtB,SAAA,CAACoB,EAAAA,IAAAC,EAAA,CAAK,MAAM,cAAe,CAAA,EAC3BD,EAAA,IAACE,EAAA,CACG,MAAOlB,EACP,SAAWmB,GAAMlB,EAASkB,EAAE,OAAO,KAAK,EACxC,KAAK,QAAA,CACT,EACAH,EAAA,IAACI,EAAA,CACG,SAAUvB,EACV,SAAWwB,GAAsBvB,EAAeuB,CAAS,CAAA,CAC7D,EACCL,EAAAA,IAAAM,EAAA,CAAY,UAAAlB,EAAsB,KAAMF,CAAQ,CAAA,CAAA,EACrD,CAER"}